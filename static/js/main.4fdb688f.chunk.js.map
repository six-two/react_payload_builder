{"version":3,"sources":["app/views/list/ReorderableListItemView.tsx","app/views/list/ReorderableListView.tsx","app/hex/ByteString.ts","app/hex/Padding.ts","app/hex/Integer.ts","app/hex/String.ts","app/hex/BytesStringBuilder.ts","app/views/CopyButton.tsx","app/views/ChooseOptionView.tsx","app/views/PresetOrCustomString.tsx","app/views/hex/OutputView.tsx","app/Common.ts","app/views/hex/PaddingEditView.tsx","app/views/hex/IntegerEditView.tsx","app/views/hex/StringEditView.tsx","app/views/hex/HexElementView.tsx","App.tsx","serviceWorker.js","index.js"],"names":["ListItemView","props","onMoveUp","bind","onMoveDown","onDelete","className","this","children","type","value","onClick","disabled","index","isLast","onItemsSwap","onItemDelete","React","Component","ReorderableListView","state","entries","nextId","onItemAdd","onItemChange","onItemDeleted","onItemSwapped","map","elem","key","length","createElement","entryClass","data","onChange","copy","slice","newItemData","entry","push","newValue","indexFrom","indexTo","tmp","splice","newArray","setState","ByteString","str","bytes","updateByteCount","i","isNaN","parseInt","Error","invStr","hex","result","TYPE","Utils","pattern","paddToLength","padding","previousByteStrings","offset","missing","patternBytes","repeatCount","Math","floor","incompleteSize","paddingStr","repeat","incompletePaddingStr","join","MAX_INT_MAP","Map","set","BYTE_COUNT_MAP","numberString","numberType","integer","num","parseNumber","maxOrNull","get","max","BigInt","e","string","replace","littleEndian","error","getErrorMessage","byteCount","toString","missingChars","fromHex","getReversed","values","count","ReversedUtils","ByteStringBuilder","blueprintList","processed","previous","toBytes","blueprint","Padding","paddingToBytes","Int","integerToBytes","Str","stringToBytes","CopyButton","event","text","copiedText","buttonText","ChooseOptionView","target","hidden","prompt","options","PresetOrCustomStringView","onTypeChange","newType","option","isCustom","lastCustomValue","undefined","onValueChange","customFormat","customOption","keys","FORMAT_MAP","OutputView","onFormatChange","newFormat","format","default_format_value","parts","split","escapedTaggedStrings","getBytesStrings","blueprints","bs","unescaped","textToCopy","tbs","isValidRepeatCountWhileEditing","repeatCountString","Number","LABELS","PaddingEditView","onPatternChange","onNumberChange","Common","changedValues","Object","assign","INT_SIZES","LABLES","IntegerEditView","renderErrorMessages","test","style","color","LABELS_NORMAL","LABELS_REVERSED","StringEditView","labels","TYPES","Pad","TYPE_MAP","defaultValues","viewClass","Integer","String","HexElementView","onChildChange","renderChild","newValues","newData","typeToClass","ret","App","onListChange","newBlueprints","href","v","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.4fdb688f.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class ListItemView extends React.Component<Props, {}> {\n  constructor(props: Props) {\n    super(props);\n    this.onMoveUp = this.onMoveUp.bind(this);\n    this.onMoveDown = this.onMoveDown.bind(this);\n    this.onDelete = this.onDelete.bind(this);\n  }\n\n  render() {\n    return (\n      <li className=\"list-item multi-colored\">\n        {this.props.children}\n        <div className=\"list-item-controls\">\n          <input type=\"button\"\n            value=\"Up\"\n            onClick={this.onMoveUp}\n            disabled={this.props.index === 0} />\n          <input type=\"button\"\n            value=\"Down\"\n            onClick={this.onMoveDown}\n            disabled={this.props.isLast} />\n          <input type=\"button\"\n            value=\"Delete\"\n            onClick={this.onDelete} />\n        </div>\n      </li>);\n  }\n\n  onMoveUp() {\n    if (this.props.index > 0) {\n      this.props.onItemsSwap(this.props.index, this.props.index - 1);\n    }\n  }\n\n  onMoveDown() {\n    if (!this.props.isLast) {\n      this.props.onItemsSwap(this.props.index, this.props.index + 1);\n    }\n  }\n\n  onDelete() {\n    this.props.onItemDelete(this.props.index);\n  }\n}\n\ninterface Props {\n  children: any,\n  index: number,\n  isLast: boolean,\n  onItemsSwap: (srcIndex: number, dstIndex: number) => void,\n  onItemDelete: (index: number) => void,\n}\n","import React from 'react';\nimport ListItemView from './ReorderableListItemView';\n\n\nexport default class ReorderableListView extends React.Component<Props, State>{\n  constructor(props: Props) {\n    super(props);\n    this.state = { entries: [], nextId: 0 }; //entry: {key: int, data: object}\n    this.onItemAdd = this.onItemAdd.bind(this);\n    this.onItemChange = this.onItemChange.bind(this);\n    this.onItemDeleted = this.onItemDeleted.bind(this);\n    this.onItemSwapped = this.onItemSwapped.bind(this);\n  }\n\n  render() {\n    return (\n      <div>\n        <h2>Hex builder</h2>\n        <ol className=\"list\">\n          {this.state.entries.map((elem, index) =>\n            <ListItemView\n              index={index}\n              key={elem.key}\n              isLast={index + 1 === this.state.entries.length}\n              onItemDelete={this.onItemDeleted}\n              onItemsSwap={this.onItemSwapped} >\n              {React.createElement(this.props.entryClass,\n                { index: index, data: elem.data, onChange: this.onItemChange })}\n\n            </ListItemView>\n          )}\n          <li key={-1}>\n            <input type=\"button\"\n              value=\"Add new element\"\n              onClick={this.onItemAdd} />\n          </li>\n        </ol>\n      </div>\n    );\n  }\n\n  onItemAdd() {\n    var copy = this.state.entries.slice();\n    var data = this.props.newItemData(copy.length);\n    let entry: Entry = { key: this.state.nextId, data: data };\n    copy.push(entry);\n    this.onChange(copy, this.state.nextId + 1);\n  }\n\n  onItemChange(index: number, newValue: Entry) {\n    var copy = this.state.entries.slice();\n    let entry: Entry = { key: copy[index].key, data: newValue };\n    copy[index] = entry;\n    this.onChange(copy, this.state.nextId);\n  }\n\n  onItemSwapped(indexFrom: number, indexTo: number) {\n    var copy = this.state.entries.slice();\n    const tmp = copy[indexFrom];\n    copy[indexFrom] = copy[indexTo];\n    copy[indexTo] = tmp;\n    this.onChange(copy, this.state.nextId);\n  }\n\n  onItemDeleted(index: number) {\n    var copy = this.state.entries.slice();\n    copy.splice(index, 1);\n    this.onChange(copy, this.state.nextId);\n  }\n\n  onChange(newArray: Entry[], nextId: number) {\n    this.setState({ entries: newArray, nextId: nextId });\n    this.props.onChange(newArray);\n  }\n}\n\ninterface Props {\n  entryClass: any,\n  onChange: (entries: Entry[]) => void,\n  newItemData: (index: number) => any,\n}\n\ninterface State {\n  entries: Entry[],\n  nextId: number,\n}\n\ninterface Entry {\n  key: number,\n  data: any,\n}\n","export default class ByteString {\n  str: string;\n  bytes: string[];\n\n  constructor(str: string) {\n    this.str = str;\n    this.bytes = []\n    this.updateByteCount();\n  }\n\n  updateByteCount() {\n    let i = 0;\n    this.bytes = []\n    while (i < this.str.length) {\n      if (this.str[i] === \"\\\\\" && i + 1 < this.str.length && this.str[i + 1] === \"x\") {\n        if (isNaN(parseInt(this.str[i + 2], 16)) || isNaN(parseInt(this.str[i + 3], 16))) {\n          throw new Error(\"Not a valid hex escape: '\" + this.str.slice(i + 2, i + 4) + \"'\");\n        }\n        this.bytes.push(this.str.slice(i, i + 4));\n        i += 4;\n      } else {\n        this.bytes.push(this.str[i]);\n        i += 1;\n      }\n    }\n  }\n\n  getReversed(): ByteString {//TODO later: is pretty inefficient\n    let invStr = \"\";\n    for (let i = this.bytes.length - 1; i >= 0; i--) {\n      invStr += this.bytes[i];\n    }\n    return new ByteString(invStr);\n  }\n\n  static fromHex(hex: string): ByteString {\n    if (hex.length % 2 === 1) {\n      throw new Error(\"Hex has odd length\");\n    }\n    let result = \"\";\n    for (var i = 0; i < hex.length; i += 2) {\n      result += \"\\\\x\" + hex.slice(i, i + 2);\n    }\n    return new ByteString(result);\n  }\n}\n","import ByteString from \"./ByteString\";\n\nexport interface Values {\n  paddToLength: number,\n  pattern: string,\n  type: string,\n}\n\nexport const TYPE = \"Padding\";\n\n\nexport class Utils {\n  static defaultValues(): Values {\n    return {\n      pattern: \"A\",\n      paddToLength: 1,\n      type: TYPE,\n    };\n  }\n\n  static paddingToBytes(padding: Values, previousByteStrings: ByteString[]): ByteString {\n    var offset = 0;\n    for (var i = 0; i < previousByteStrings.length; i++) {\n      offset += previousByteStrings[i].bytes.length;\n    }\n    var missing = padding.paddToLength - offset;\n    if (missing < 0) {\n      return new ByteString(\"<Padding can not satisfy condition: to many previous bytes>\");\n    }\n    const patternBytes = new ByteString(padding.pattern ? padding.pattern : \"?\");\n    const repeatCount = Math.floor(missing / patternBytes.bytes.length);\n    const incompleteSize = missing - (repeatCount * patternBytes.bytes.length)\n    var paddingStr: string = patternBytes.str.repeat(repeatCount);\n    var incompletePadding: string[] = patternBytes.bytes.slice(0, incompleteSize);\n    let incompletePaddingStr: string = incompletePadding.join(\"\");\n    return new ByteString(paddingStr + incompletePaddingStr);\n  }\n}\n\nexport default Values;\n","import ByteString from \"./ByteString\";\n\nexport const INT_8 = \"8 bit\";\nexport const INT_16 = \"16 bit\";\nexport const INT_32 = \"32 bit\";\nexport const INT_64 = \"64 bit\";\nexport const TYPE = \"Integer\";\n\nconst MAX_INT_MAP = new Map<string, bigint>();\nMAX_INT_MAP.set(INT_8, 0xffn);\nMAX_INT_MAP.set(INT_16, 0xffffn);\nMAX_INT_MAP.set(INT_32, 0xffffffffn);\nMAX_INT_MAP.set(INT_64, 0xffffffffffffffffn);\n\nconst BYTE_COUNT_MAP = new Map<string, number>();\nBYTE_COUNT_MAP.set(INT_8, 1);\nBYTE_COUNT_MAP.set(INT_16, 2);\nBYTE_COUNT_MAP.set(INT_32, 4);\nBYTE_COUNT_MAP.set(INT_64, 8);\n\nexport interface Values {\n  numberString: string,\n  numberType: string,\n  type: string,\n}\n\nexport class Utils {\n  static defaultValues(): Values {\n    return {\n      numberString: \"0x41414141\",\n      numberType: INT_32,\n      type: TYPE,\n    };\n  }\n\n  static getErrorMessage(integer: Values) {\n    try {\n      var num: bigint = Utils.parseNumber(integer.numberString);\n      const type: string = integer.numberType;\n      let maxOrNull = MAX_INT_MAP.get(type);\n      if (!maxOrNull) {\n        throw new Error(`Unknown number type: ${type}`);\n      } else {\n        let max: bigint = maxOrNull;\n        if (num > max) {\n          return `Number to big for '${type}'`;\n        }\n        if (num < 0n) {\n          const min: bigint = (max + 1n) / BigInt(-2);\n          if (num < min) {\n            return `Number to big for '${type}'`;\n          }\n        }\n      }\n    } catch (e) {\n      return \"Parsing integer failed\";\n    }\n  }\n\n  static parseNumber(string: string): bigint {\n    // Remove characters that can be used to make strings more human readable\n    string = string.replace(/[\\s_]+/g, \"\");\n    return BigInt(string);\n  }\n\n\n  static integerToBytes(integer: Values,\n    littleEndian: boolean = true): ByteString {\n    var error = Utils.getErrorMessage(integer);\n    if (error) {\n      return new ByteString(`<Error: ${error}>`)\n    }\n    var num: bigint = Utils.parseNumber(integer.numberString);\n    let max = MAX_INT_MAP.get(integer.numberType);\n    let byteCount = BYTE_COUNT_MAP.get(integer.numberType);\n    if (!max || !byteCount) {\n      throw new Error(`Unknown number type: ${integer.numberType}`);\n    }\n    if (num < 0n) {\n      num += max + 1n;\n    }\n    let hex: string = num.toString(16);\n    let missingChars = 2 * byteCount - hex.length;\n    hex = \"0\".repeat(missingChars) + hex;//padd with leading zeros\n    let bytes: ByteString = ByteString.fromHex(hex);\n    return littleEndian ? bytes.getReversed() : bytes;\n  }\n}\n","import ByteString from \"./ByteString\";\n\nexport interface Values {\n  repeatCount: number,\n  pattern: string,\n  type: string,\n}\n\nexport const TYPE = \"String\";\nexport const TYPE_REVERSED = \"String (reversed)\";\n\n\nexport class Utils {\n  static defaultValues(): Values {\n    return {\n      pattern: \"A\",\n      repeatCount: 1,\n      type: TYPE,\n    };\n  }\n\n  static stringToBytes(values: Values): ByteString {\n    const count = values.repeatCount;\n    let pattern = values.pattern.repeat(count);\n    return new ByteString(pattern);\n  }\n}\n\nexport class ReversedUtils {\n  static defaultValues(): Values {\n    return {\n      pattern: \"A\",\n      repeatCount: 1,\n      type: TYPE_REVERSED,\n    };\n  }\n\n  static stringToBytes(values: Values): ByteString {\n    const count = values.repeatCount;\n    let revPattern = new ByteString(values.pattern).getReversed().str;\n    let pattern = revPattern.repeat(count);\n    return new ByteString(pattern);\n\n  }\n}\n\nexport default Values;\n","import * as Padding from './Padding';\nimport * as Int from './Integer';\nimport * as Str from './String';\nimport ByteString from './ByteString';\n\nexport class ByteStringBuilder {\n  static getBytesStrings(blueprintList: Blueprint[]): TaggedByteString[] {\n    let processed: TaggedByteString[] = [];\n    let previous: ByteString[] = [];\n    for (let i = 0; i < blueprintList.length; i++) {\n      let bytes: ByteString = ByteStringBuilder.toBytes(blueprintList[i].data, previous);\n      let entry = { key: blueprintList[i].key, data: bytes };\n      previous.push(bytes);\n      processed.push(entry);\n    }\n    return processed;\n  }\n\n  static toBytes(blueprint: any, previousByteStrings: ByteString[]): ByteString {\n    switch (blueprint.type) {\n      case Padding.TYPE:\n        return Padding.Utils.paddingToBytes(blueprint, previousByteStrings);\n      case Int.TYPE:\n        let littleEndian = true;\n        return Int.Utils.integerToBytes(blueprint, littleEndian);\n      case Str.TYPE:\n        return Str.Utils.stringToBytes(blueprint);\n      case Str.TYPE_REVERSED:\n        return Str.ReversedUtils.stringToBytes(blueprint);\n      default:\n        return new ByteString(\"<Unknown type>\");\n    }\n  }\n\n\n};\n\nexport interface Blueprint {\n  key: number,\n  data: any,\n}\n\nexport interface TaggedByteString {\n  key: number,\n  data: ByteString,\n}\n\nexport default ByteStringBuilder;\n","import React from 'react';\nimport copy from 'copy-to-clipboard';\n\nexport default class CopyButton extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { copiedText: null };\n  }\n\n  render() {\n    const alreadyCopied = this.props.text === this.state.copiedText;\n    const buttonText = alreadyCopied ? \"Copied\" : \"Copy\";\n    return (\n      <button onClick={this.onClick}>\n        {buttonText}\n      </button>\n    );\n  }\n\n  onClick = (event: any) => {\n    const text = this.props.text;\n    copy(text);\n    this.setState({ copiedText: text });\n  }\n}\n\ninterface State {\n  copiedText: string | null,\n}\n\ninterface Props {\n  text: string,\n}\n","import React from 'react';\n\nexport class ChooseOptionView extends React.Component<ChooseOptionViewProps, {}> {\n  static defaultValue(): string {\n    return \"\";\n  }\n\n  render() {\n    return (<select onChange={(event) => { this.props.onChange(event.target.value) }} value={this.props.value}>\n      <option value=\"\" key={-1} disabled hidden>\n        {this.props.prompt ? this.props.prompt : \"Choose a option\"}\n      </option>\n      {this.props.options.map((value: any, i: number) => {\n        // Here using key=index should be ok, since the order should not change\n        return <option value={value} key={i}>{value}</option>;\n      })}\n    </select>);\n  }\n}\n\nexport interface ChooseOptionViewProps {\n  prompt?: string,\n  value: string,\n  options: string[],\n  onChange: (newValue: string) => void,\n}\n\nexport default ChooseOptionView;\n","import React from 'react';\nimport ChooseOptionView from './ChooseOptionView';\n\n\nexport class PresetOrCustomStringView extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    let customFormat = props.options.get(props.customOption);\n    if (customFormat === undefined) {\n      throw new Error(\"Initial value for customOption is not suppplied\");\n    }\n\n    this.state = { lastCustomValue: customFormat };\n    // this.onTypeChange = this.onTypeChange.bind(this);\n    // this.onValueChange = this.onValueChange.bind(this);\n  }\n\n  render() {\n    return (\n      <div>\n        <ChooseOptionView\n          value={this.props.values.option}\n          onChange={this.onTypeChange}\n          options={[...this.props.options.keys()]} />\n        {this.isCustom() ?\n          <input type=\"text\"\n            value={this.props.values.value}\n            onChange={this.onValueChange} /> : null}\n      </div>\n    );\n  }\n\n  isCustom(option: string | undefined = undefined): boolean {\n    option = option ?? this.props.values.option;\n    return option === this.props.customOption;\n  }\n\n  onTypeChange = (newType: string) => {\n    if (newType === this.props.values.option) {\n      return; //no type change\n    }\n    let value;\n    if (this.isCustom(newType)) {\n      // preset -> custom\n      // load last used custom value\n      value = this.state.lastCustomValue;\n    }\n    else {\n      if (this.isCustom()) {\n        // custom -> preset\n        // store current custom value for the future\n        this.setState({ lastCustomValue: this.props.values.value });\n      }\n      value = this.props.options.get(newType);\n      if (value === undefined) {\n        throw new Error(\"[BUG] Type has no value mapped\"); //should never happen\n      }\n    }\n    const values: Values = { option: newType, value: value };\n    this.props.onChange(values);\n  }\n\n  onValueChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (this.isCustom()) {//should be true\n      const values: Values = {\n        option: this.props.values.option,\n        value: event.target.value,\n      };\n      this.props.onChange(values);\n    }\n  }\n}\n\nexport interface Props {\n  options: Map<string, string>,\n  customOption: string,\n  values: Values,\n  onChange: (newValues: Values) => void,\n}\n\ninterface State {\n  lastCustomValue: string,//changing this has no effect on the rendering of the component\n}\n\nexport interface Values {\n  option: string,\n  value: string,\n}\n\nexport default PresetOrCustomStringView;\n","import React from 'react';\nimport ChooseOptionView from '../ChooseOptionView';\nimport { TaggedByteString, Blueprint, ByteStringBuilder } from '../../hex/BytesStringBuilder';\nimport CopyButton from '../CopyButton';\nimport * as FormatChooser from \"../PresetOrCustomString\";\n\n\nconst CUSTOM_FORMAT = \"custom\";\nconst DEFAULT_FORMAT = \"raw\";\nconst FORMAT_MAP = new Map<string, string>();\nFORMAT_MAP.set(\"python\", \"python -c 'print(\\\"%s\\\")'\");\nFORMAT_MAP.set(\"printf\", \"printf '%s'\");\nFORMAT_MAP.set(DEFAULT_FORMAT, \"%s\");\nFORMAT_MAP.set(CUSTOM_FORMAT, \"your_command --flags '%s'\")\n\nfunction escapeOutputString(unescaped: string): string {\n  // escape quote signs since they could mess up passing the payload to a program (eg printf)\n  return unescaped.replace(/'/g, \"\\\\x27\").replace(/\"/g, \"\\\\x22\")\n    // escape spaces, since the html does not handle consecutive whitespaces well\n    .replace(/ /g, \"\\\\x20\");\n}\n\nexport default class OutputView extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    const default_format_value = FORMAT_MAP.get(DEFAULT_FORMAT) ?? \"%s\";\n    this.state = {\n      format: { option: DEFAULT_FORMAT, value: default_format_value }\n    };\n  }\n\n  render() {\n    var error;\n    const parts = this.state.format.value.split(\"%s\");\n    if (parts.length !== 2) {\n      error = 'Format has to contain exactly one \"%s\" (without the quotes)';\n    }\n\n    let escapedTaggedStrings: TaggedString[] = [];//to make the type check happy\n    try {\n      let byteStrings = ByteStringBuilder.getBytesStrings(this.props.blueprints);\n      escapedTaggedStrings = byteStrings.map((bs: TaggedByteString) => {\n        let taggedStr: TaggedString = {\n          key: bs.key,\n          str: escapeOutputString(bs.data.str),\n        };\n        return taggedStr;\n      })\n    } catch (e) {\n      error = \"An error occured while creating the output\";\n    }\n    let textToCopy = escapedTaggedStrings.map((tbs) => { return tbs.str }).join(\"\");\n    textToCopy = parts[0] + textToCopy + parts[1];\n\n    return (\n      <div>\n        {\"Output format: \"}\n        <FormatChooser.PresetOrCustomStringView options={FORMAT_MAP}\n          values={this.state.format}\n          customOption={CUSTOM_FORMAT}\n          onChange={this.onFormatChange} />\n        <br />\n        {error ?\n          <span className=\"err-msg\">{error}</span> :\n          <div className=\"byteOutput\">\n            <CopyButton text={textToCopy} />\n            <br />\n            {parts[0]}\n            <span>\n              {escapedTaggedStrings.map((value: TaggedString) => {\n                return <span className=\"multi-colored\" key={value.key}>{value.str}</span>;\n              })}\n            </span>\n            {parts[1]}\n          </div>\n        }\n      </div>\n    );\n  }\n\n  onFormatChange = (newFormat: FormatChooser.Values) => {\n    this.setState({ format: newFormat });\n  }\n}\n\ninterface Props {\n  blueprints: Blueprint[],\n}\n\ninterface State {\n  format: FormatChooser.Values,\n}\n\ninterface TaggedString {\n  str: string,\n  key: number,\n}\n","// Do not allow arbitrary large values for repeatCount, paddToLength, etc to\n// prevent you from accidentially DoS'ing yourself. Happened to me ;D\nexport const MAX_REPEAT_INT = 100000 - 1;\nexport const OUTPUT_COLORS = [\"red\", \"green\", \"blue\"];\n\nexport function isValidRepeatCountWhileEditing(repeatCountString: string): boolean {\n  if (repeatCountString === \"\") {\n    // allow the empty string while editing\n    return true;\n  } else {\n    const repeatCount = Number(repeatCountString);\n    return (!isNaN(repeatCount)) && (repeatCount > 0) && (repeatCount <= MAX_REPEAT_INT);\n  }\n}\n\nexport function clamp(minInclusive: number, value: number, maxInclusive: number) {\n  return Math.max(minInclusive, Math.min(value, maxInclusive));\n};\n","import React from 'react';\nimport * as Padding from '../../hex/Padding';\nimport * as Common from '../../Common';\n\nconst LABELS = [\"Repeat \", \" up to index \"];\n\nexport default class PaddingEditView extends React.Component<Props> {\n  constructor(props: Props) {\n    super(props);\n    this.onPatternChange = this.onPatternChange.bind(this);\n    this.onNumberChange = this.onNumberChange.bind(this);\n  }\n\n  render() {\n    return (\n      <div>\n        {LABELS[0]}\n        <input type=\"text\"\n          value={this.props.values.pattern}\n          onChange={this.onPatternChange} />\n        {LABELS[1]}\n        <input type=\"text\"\n          value={this.props.values.paddToLength}\n          onChange={this.onNumberChange} />\n      </div>);\n  }\n\n  onNumberChange(event: React.ChangeEvent<HTMLInputElement>) {\n    if (Common.isValidRepeatCountWhileEditing(event.target.value)) {\n      this.onChange({ paddToLength: event.target.value });\n    }\n  }\n\n  onPatternChange(event: React.ChangeEvent<HTMLInputElement>) {\n    this.onChange({ pattern: event.target.value });\n  }\n\n  onChange(changedValues: any) {\n    this.props.onChange(Object.assign({}, this.props.values, changedValues));\n  }\n}\n\nexport interface Props {\n  values: Padding.Values,\n  onChange: (newValues: Padding.Values) => void,\n}\n","import React from 'react';\nimport ChooseOptionView from '../ChooseOptionView';\nimport * as Int from \"../../hex/Integer\";\n\nconst INT_SIZES = [Int.INT_8, Int.INT_16, Int.INT_32, Int.INT_64];\nconst LABLES = [\" as \", \" integer\"]\n\nexport default class IntegerEditView extends React.Component<Props, {}> {\n  constructor(props: Props) {\n    super(props);\n    this.onTypeChange = this.onTypeChange.bind(this);\n    this.onValueChange = this.onValueChange.bind(this);\n  }\n\n  render() {\n    return (\n      <div>\n        <input type=\"text\"\n          value={this.props.values.numberString}\n          onChange={this.onValueChange} />\n        {LABLES[0]}\n        <ChooseOptionView\n          value={this.props.values.numberType}\n          onChange={this.onTypeChange}\n          options={INT_SIZES} />\n        {LABLES[1]}\n        {this.renderErrorMessages()}\n      </div>\n    );\n  }\n\n  onTypeChange(newValue: string) {\n    this.onChange({ numberType: newValue });\n  }\n\n  onValueChange(event: React.ChangeEvent<HTMLInputElement>) {\n    // only allow certain input characters: hex and 'o' and 'x' for 0x/0b\n    if (/^([0-9a-fA-Fxo]*)$/.test(event.target.value)) {\n      this.onChange({ numberString: event.target.value });\n    }\n  }\n\n  onChange(changedValues: any) {\n    this.props.onChange(Object.assign({}, this.props.values, changedValues));\n  }\n\n  renderErrorMessages(): any {\n    var error = Int.Utils.getErrorMessage(this.props.values);\n\n    if (error) {\n      return <span style={{ color: \"red\" }}>Error: {error}</span>\n    }\n  }\n}\n\ninterface Props {\n  values: Int.Values,\n  onChange: (newValues: Int.Values) => void,\n}\n","import React from 'react';\nimport * as Str from '../../hex/String';\nimport * as Common from '../../Common';\n\nconst LABELS_NORMAL = [\"Repeat \", \" exactly \", \" time(s)\"];\nconst LABELS_REVERSED = [\"Reverse \", \" and repeat it \", \" time(s)\"];\n\nexport default class StringEditView extends React.Component<Props> {\n  constructor(props: Props) {\n    super(props);\n    this.onPatternChange = this.onPatternChange.bind(this);\n    this.onNumberChange = this.onNumberChange.bind(this);\n  }\n\n  render() {\n    const labels = this.props.values.type === Str.TYPE_REVERSED ?\n      LABELS_REVERSED : LABELS_NORMAL;\n    return (\n      <div>\n        {labels[0]}\n        <input type=\"text\"\n          value={this.props.values.pattern}\n          onChange={this.onPatternChange} />\n        {labels[1]}\n        <input type=\"text\"\n          value={this.props.values.repeatCount}\n          onChange={this.onNumberChange} />\n        {labels[2]}\n      </div>);\n  }\n\n  onNumberChange(event: React.ChangeEvent<HTMLInputElement>) {\n    if (Common.isValidRepeatCountWhileEditing(event.target.value)) {\n      this.onChange({ repeatCount: event.target.value });\n    }\n  }\n\n  onPatternChange(event: React.ChangeEvent<HTMLInputElement>) {\n    this.onChange({ pattern: event.target.value });\n  }\n\n  onChange(changedValues: any) {\n    this.props.onChange(Object.assign({}, this.props.values, changedValues));\n  }\n}\n\nexport interface Props {\n  values: Str.Values,\n  onChange: (newValues: Str.Values) => void,\n}\n","import React from 'react';\nimport ChooseOptionView from '../ChooseOptionView';\nimport Padding from './PaddingEditView';\nimport Integer from './IntegerEditView';\nimport String from './StringEditView';\nimport * as Int from '../../hex/Integer';\nimport * as Pad from '../../hex/Padding';\nimport * as Str from '../../hex/String';\n\nvar TYPES = [Int.TYPE, Str.TYPE, Str.TYPE_REVERSED, Pad.TYPE];\nconst TYPE_MAP = new Map<string, TypeInfos>();\nTYPE_MAP.set(Pad.TYPE, { defaultValues: Pad.Utils.defaultValues, viewClass: Padding });\nTYPE_MAP.set(Int.TYPE, { defaultValues: Int.Utils.defaultValues, viewClass: Integer });\nTYPE_MAP.set(Str.TYPE, { defaultValues: Str.Utils.defaultValues, viewClass: String });\nTYPE_MAP.set(Str.TYPE_REVERSED, { defaultValues: Str.ReversedUtils.defaultValues, viewClass: String });\n\n\nexport default class HexElementView extends React.Component<HexElementViewProps, HexElementViewProps> {\n  constructor(props: HexElementViewProps) {\n    super(props);\n    this.onTypeChange = this.onTypeChange.bind(this);\n    this.onChildChange = this.onChildChange.bind(this);\n  }\n\n  render() {\n    return (\n      <div className=\"editListView\">\n        {\"Type: \"}\n        <ChooseOptionView value={this.props.data.type} options={TYPES} onChange={this.onTypeChange} />\n\n        {this.renderChild(this.props.data.type)}\n      </div>\n    );\n  }\n\n  onTypeChange(newType: string) {\n    this.onChange(newType, this.defaultValues(newType));\n  }\n\n  onChildChange(newValues: any) {\n    this.onChange(this.props.data.type, newValues);\n  }\n\n  onChange(newType: string, newValues: any) {\n    const newData = Object.assign(newValues, { type: newType });\n    this.props.onChange(this.props.index, newData);\n  }\n\n  renderChild(type: string): any {\n    return React.createElement(this.typeToClass(type), {\n      onChange: this.onChildChange,\n      values: this.props.data,\n    });\n  }\n\n  defaultValues(type: string): any {\n    let ret = TYPE_MAP.get(type)?.defaultValues;\n    if (!ret) {\n      throw Error(`Unknown type: ${type}`);\n    }\n    return ret();\n  }\n\n  typeToClass(type: string): any {\n    let ret = TYPE_MAP.get(type)?.viewClass;\n    if (!ret) {\n      throw Error(`Unknown type: ${type}`);\n    }\n    return ret;\n  }\n};\n\ninterface HexElementViewProps {\n  onChange: (index: number, newValue: any) => void,\n  index: number,\n  data: any,\n}\n\ninterface TypeInfos {\n  defaultValues: any,\n  viewClass: any,\n}\n","import React from 'react';\nimport './App.css';\nimport HexBuilderListView from './app/views/list/ReorderableListView';\nimport OutputView from './app/views/hex/OutputView';\nimport HexElementView from './app/views/hex/HexElementView';\nimport * as Str from './app/hex/String';\n\n// TODO: next steps\n//  - show little endian checkbox if at least one integer is selected\n//  - CSS\n\nexport default class App extends React.Component<any, State> {\n  constructor(props: any) {\n    super(props);\n    this.state = { blueprints: [] }\n  }\n\n  render() {\n    const colors: string[] = [\"red\", \"green\", \"blue\"]\n    return (\n      <div className=\"app-root\">\n        <a href=\"http://six-two.github.io/react_payload_builder\">\n          View the Gitlab Pages version\n        </a>\n        <HexBuilderListView\n          onChange={this.onListChange}\n          entryClass={HexElementView}\n          newItemData={(index: number) => {\n            var v: any = Str.Utils.defaultValues();\n            v.repeatCount = index + 1;\n            return v;\n          }} />\n        <OutputView blueprints={this.state.blueprints} />\n      </div>\n    );\n  }\n\n  onListChange = (newBlueprints: Blueprint[]) => {\n    this.setState({ blueprints: newBlueprints });\n  }\n}\n\ninterface State {\n  blueprints: Blueprint[],\n}\n\ninterface Blueprint {\n  key: number,\n  data: any,\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}