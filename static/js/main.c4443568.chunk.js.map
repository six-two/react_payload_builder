{"version":3,"sources":["app/views/ChooseOptionView.tsx","app/Common.ts","app/views/hex/PaddingEditView.tsx","app/hex/ByteString.ts","app/hex/Padding.ts","app/hex/String.ts","app/hex/ByteStringBuilder.ts","app/hex/Integer.ts","app/views/hex/IntegerEditView.tsx","app/views/hex/StringEditView.tsx","app/views/list/ReorderableItemControls.tsx","app/views/hex/HexElementView.tsx","app/views/list/ReorderableListView.tsx","app/views/CopyButton.tsx","app/views/PresetOrCustomString.tsx","app/views/hex/OutputView.tsx","App.tsx","serviceWorker.js","index.js"],"names":["ChooseOptionView","onChange","event","props","target","value","this","key","disabled","hidden","prompt","options","map","i","React","Component","isValidRepeatCountWhileEditing","repeatCountString","repeatCount","Number","isNaN","LABELS","PaddingEditView","onNumberChange","Common","paddToLength","onPatternChange","pattern","className","type","values","changedValues","Object","assign","ByteString","str","bytes","updateByteCount","length","parseInt","Error","slice","push","invStr","hex","result","Utils","padding","previousByteStrings","offset","missing","throwBadInputError","patternBytes","Math","floor","incompleteSize","paddingStr","repeat","incompletePaddingStr","join","count","ReversedUtils","getReversed","ERROR_BYTE_STRING","data","message","e","name","ByteStringBuilder","littleEndian","blueprintList","processed","previous","toBytes","entry","byteStrings","errorMessage","blueprint","Padding","paddingToBytes","Int","integerToBytes","Str","stringToBytes","TYPE","MAX_INT_MAP","Map","set","BYTE_COUNT_MAP","numberString","numberType","integer","num","parseNumber","maxOrNull","get","max","BigInt","string","replace","error","getErrorMessage","byteCount","toString","missingChars","fromHex","INT_SIZES","LABLES","IntegerEditView","onTypeChange","newValue","onValueChange","test","LABELS_NORMAL","LABELS_REVERSED","StringEditView","labels","ListItemControls","onMoveUp","index","onItemsSwap","onMoveDown","isLast","onDelete","onItemDelete","onClick","TYPE_MAP","defaultValues","viewClass","Integer","String","Pad","TYPES","keys","getTypeInfo","ret","HexElementView","newType","onChildChange","newValues","renderChild","ReorderableItemControls","newData","createElement","ReorderableListView","onItemAdd","copy","state","entries","newItemData","nextId","onItemChange","onItemSwapped","indexFrom","indexTo","tmp","onItemDeleted","splice","elem","style","width","newArray","setState","CopyButton","text","copiedText","buttonText","PresetOrCustomStringView","option","isCustom","lastCustomValue","undefined","customFormat","customOption","label","FORMAT_MAP","OutputView","onFormatChange","newFormat","format","onEndianChange","isLittleEndian","checked","default_format_value","parts","split","escapedTaggedStrings","getBytesStrings","blueprints","bs","unescaped","textToCopy","tbs","App","onListChange","newBlueprints","href","entryClass","v","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.c4443568.chunk.js","sourcesContent":["import React from 'react';\n\nexport class ChooseOptionView extends React.Component<ChooseOptionViewProps, {}> {\n  static defaultValue(): string {\n    return \"\";\n  }\n\n  render() {\n    return (<select onChange={(event) => { this.props.onChange(event.target.value) }} value={this.props.value}>\n      <option value=\"\" key={-1} disabled hidden>\n        {this.props.prompt ? this.props.prompt : \"Choose a option\"}\n      </option>\n      {this.props.options.map((value: any, i: number) => {\n        // Here using key=index should be ok, since the order should not change\n        return <option value={value} key={i}>{value}</option>;\n      })}\n    </select>);\n  }\n}\n\nexport interface ChooseOptionViewProps {\n  prompt?: string,\n  value: string,\n  options: string[],\n  onChange: (newValue: string) => void,\n}\n\nexport default ChooseOptionView;\n","// Do not allow arbitrary large values for repeatCount, paddToLength, etc to\n// prevent you from accidentially DoS'ing yourself. Happened to me ;D\nexport const MAX_REPEAT_INT = 100000 - 1;\nexport const OUTPUT_COLORS = [\"red\", \"green\", \"blue\"];\n\nexport function isValidRepeatCountWhileEditing(repeatCountString: string): boolean {\n  if (repeatCountString === \"\") {\n    // allow the empty string while editing\n    return true;\n  } else {\n    const repeatCount = Number(repeatCountString);\n    return (!isNaN(repeatCount)) && (repeatCount > 0) && (repeatCount <= MAX_REPEAT_INT);\n  }\n}\n\nexport function clamp(minInclusive: number, value: number, maxInclusive: number) {\n  return Math.max(minInclusive, Math.min(value, maxInclusive));\n};\n","import React from 'react';\nimport * as Padding from '../../hex/Padding';\nimport * as Common from '../../Common';\n\nconst LABELS = [\"Repeat \", \" up to index \"];\n\nexport default class PaddingEditView extends React.Component<Props> {\n  render() {\n    return (\n      <div>\n        {LABELS[0]}\n        <input className=\"input-string\" type=\"text\"\n          value={this.props.values.pattern}\n          onChange={this.onPatternChange} />\n        {LABELS[1]}\n        <input className=\"input-count\" type=\"text\"\n          value={this.props.values.paddToLength}\n          onChange={this.onNumberChange} />\n      </div>);\n  }\n\n  onNumberChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (Common.isValidRepeatCountWhileEditing(event.target.value)) {\n      this.onChange({ paddToLength: event.target.value });\n    }\n  }\n\n  onPatternChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.onChange({ pattern: event.target.value });\n  }\n\n  onChange(changedValues: any) {\n    this.props.onChange(Object.assign({}, this.props.values, changedValues));\n  }\n}\n\nexport interface Props {\n  values: Padding.Values,\n  onChange: (newValues: Padding.Values) => void,\n}\n","export default class ByteString {\n  str: string;\n  bytes: string[];\n\n  constructor(str: string) {\n    this.str = str;\n    this.bytes = []\n    this.updateByteCount();\n  }\n\n  updateByteCount() {\n    let i = 0;\n    this.bytes = []\n    while (i < this.str.length) {\n      if (this.str[i] === \"\\\\\" && i + 1 < this.str.length && this.str[i + 1] === \"x\") {\n        if (isNaN(parseInt(this.str[i + 2], 16)) || isNaN(parseInt(this.str[i + 3], 16))) {\n          throw new Error(\"Not a valid hex escape: '\" + this.str.slice(i + 2, i + 4) + \"'\");\n        }\n        this.bytes.push(this.str.slice(i, i + 4));\n        i += 4;\n      } else {\n        this.bytes.push(this.str[i]);\n        i += 1;\n      }\n    }\n  }\n\n  getReversed(): ByteString {//TODO later: is pretty inefficient\n    let invStr = \"\";\n    for (let i = this.bytes.length - 1; i >= 0; i--) {\n      invStr += this.bytes[i];\n    }\n    return new ByteString(invStr);\n  }\n\n  static fromHex(hex: string): ByteString {\n    if (hex.length % 2 === 1) {\n      throw new Error(\"Hex has odd length\");\n    }\n    let result = \"\";\n    for (var i = 0; i < hex.length; i += 2) {\n      result += \"\\\\x\" + hex.slice(i, i + 2);\n    }\n    return new ByteString(result);\n  }\n}\n","import ByteString from \"./ByteString\";\nimport {throwBadInputError} from \"./ByteStringBuilder\";\n\nexport interface Values {\n  paddToLength: number,\n  pattern: string,\n  type: string,\n}\n\nexport const TYPE = \"Padding\";\n\n\nexport class Utils {\n  static defaultValues(): Values {\n    return {\n      pattern: \"A\",\n      paddToLength: 1,\n      type: TYPE,\n    };\n  }\n\n  static paddingToBytes(padding: Values, previousByteStrings: ByteString[]): ByteString {\n    var offset = 0;\n    for (var i = 0; i < previousByteStrings.length; i++) {\n      offset += previousByteStrings[i].bytes.length;\n    }\n    var missing = padding.paddToLength - offset;\n    if (missing < 0) {\n      throwBadInputError(`Padding should be applied up to index ${padding.paddToLength}, but the string is already longer than that (length=${offset})`);\n    }\n    if (!padding.pattern) {\n      throwBadInputError(\"Padding can not be empty\");\n    }\n    const patternBytes = new ByteString(padding.pattern ? padding.pattern : \"?\");\n    const repeatCount = Math.floor(missing / patternBytes.bytes.length);\n    const incompleteSize = missing - (repeatCount * patternBytes.bytes.length)\n    var paddingStr: string = patternBytes.str.repeat(repeatCount);\n    var incompletePadding: string[] = patternBytes.bytes.slice(0, incompleteSize);\n    let incompletePaddingStr: string = incompletePadding.join(\"\");\n    return new ByteString(paddingStr + incompletePaddingStr);\n  }\n}\n\nexport default Values;\n","import ByteString from \"./ByteString\";\n\nexport interface Values {\n  repeatCount: number,\n  pattern: string,\n  type: string,\n}\n\nexport const TYPE = \"String\";\nexport const TYPE_REVERSED = \"String (reversed)\";\n\n\nexport class Utils {\n  static defaultValues(): Values {\n    return {\n      pattern: \"A\",\n      repeatCount: 1,\n      type: TYPE,\n    };\n  }\n\n  static stringToBytes(values: Values): ByteString {\n    const count = values.repeatCount;\n    let pattern = values.pattern.repeat(count);\n    return new ByteString(pattern);\n  }\n}\n\nexport class ReversedUtils {\n  static defaultValues(): Values {\n    return {\n      pattern: \"A\",\n      repeatCount: 1,\n      type: TYPE_REVERSED,\n    };\n  }\n\n  static stringToBytes(values: Values): ByteString {\n    const count = values.repeatCount;\n    let revPattern = new ByteString(values.pattern).getReversed().str;\n    let pattern = revPattern.repeat(count);\n    return new ByteString(pattern);\n\n  }\n}\n\nexport default Values;\n","import * as Padding from './Padding';\nimport * as Int from './Integer';\nimport * as Str from './String';\nimport ByteString from './ByteString';\n\nconst BAD_INPUT_ERROR_NAME = \"BadInputError\";\nconst ERROR_BYTE_STRING: TaggedByteString = {\n  key: -1,\n  data: new ByteString(\"Error: Please check your inputs. @dev: This message should not be shown\"),\n}\n\nexport function throwBadInputError(message: string) {\n  // This function creates an error that signals, that it was caused by bad user input\n  let e = new Error(message || \"Something went wrong. Please check your inputs\")\n  e.name = BAD_INPUT_ERROR_NAME;\n  throw e;\n}\n\nexport class ByteStringBuilder {\n  littleEndian: boolean;\n\n  constructor(littleEndian: boolean = true) {\n    this.littleEndian = littleEndian;\n  }\n\n  getBytesStrings(blueprintList: Blueprint[]): BuilderResult {\n    let i: number = 0;\n    try {\n      let processed: TaggedByteString[] = [];\n      let previous: ByteString[] = [];\n      for (i = 0; i < blueprintList.length; i++) {\n        let bytes: ByteString = this.toBytes(blueprintList[i].data, previous);\n        let entry = { key: blueprintList[i].key, data: bytes };\n        previous.push(bytes);\n        processed.push(entry);\n      }\n      return { byteStrings: processed };\n    } catch (e) {\n      if (e.name === BAD_INPUT_ERROR_NAME) {\n        return { errorMessage: `Error in input ${i + 1}: ${e.message}`, byteStrings: [ERROR_BYTE_STRING] };\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  toBytes(blueprint: any, previousByteStrings: ByteString[]): ByteString {\n    switch (blueprint.type) {\n      case Padding.TYPE:\n        return Padding.Utils.paddingToBytes(blueprint, previousByteStrings);\n      case Int.TYPE:\n        return Int.Utils.integerToBytes(blueprint, this.littleEndian);\n      case Str.TYPE:\n        return Str.Utils.stringToBytes(blueprint);\n      case Str.TYPE_REVERSED:\n        return Str.ReversedUtils.stringToBytes(blueprint);\n      default:\n        return new ByteString(\"<Unknown type>\");\n    }\n  }\n};\n\nexport interface Blueprint {\n  key: number,\n  data: any,\n}\n\nexport interface BuilderResult {\n  byteStrings: TaggedByteString[],\n  errorMessage?: string,\n}\n\nexport interface TaggedByteString {\n  key: number,\n  data: ByteString,\n}\n\nexport default ByteStringBuilder;\n","import ByteString from \"./ByteString\";\nimport {throwBadInputError} from \"./ByteStringBuilder\";\n\nexport const INT_8 = \"8 bit\";\nexport const INT_16 = \"16 bit\";\nexport const INT_32 = \"32 bit\";\nexport const INT_64 = \"64 bit\";\nexport const TYPE = \"Integer\";\n\nconst MAX_INT_MAP = new Map<string, bigint>();\nMAX_INT_MAP.set(INT_8, 0xffn);\nMAX_INT_MAP.set(INT_16, 0xffffn);\nMAX_INT_MAP.set(INT_32, 0xffffffffn);\nMAX_INT_MAP.set(INT_64, 0xffffffffffffffffn);\n\nconst BYTE_COUNT_MAP = new Map<string, number>();\nBYTE_COUNT_MAP.set(INT_8, 1);\nBYTE_COUNT_MAP.set(INT_16, 2);\nBYTE_COUNT_MAP.set(INT_32, 4);\nBYTE_COUNT_MAP.set(INT_64, 8);\n\nexport interface Values {\n  numberString: string,\n  numberType: string,\n  type: string,\n}\n\nexport class Utils {\n  static defaultValues(): Values {\n    return {\n      numberString: \"0x41414141\",\n      numberType: INT_32,\n      type: TYPE,\n    };\n  }\n\n  static getErrorMessage(integer: Values) {\n    try {\n      var num: bigint = Utils.parseNumber(integer.numberString);\n      const type: string = integer.numberType;\n      let maxOrNull = MAX_INT_MAP.get(type);\n      if (!maxOrNull) {\n        throw new Error(`Unknown number type: ${type}`);\n      } else {\n        let max: bigint = maxOrNull;\n        if (num > max) {\n          return `Number to big for '${type}'`;\n        }\n        if (num < 0n) {\n          const min: bigint = (max + 1n) / BigInt(-2);\n          if (num < min) {\n            return `Number to big for '${type}'`;\n          }\n        }\n      }\n    } catch (e) {\n      return \"Parsing integer failed\";\n    }\n  }\n\n  static parseNumber(string: string): bigint {\n    // Remove characters that can be used to make strings more human readable\n    string = string.replace(/[\\s_]+/g, \"\");\n    return BigInt(string);\n  }\n\n\n  static integerToBytes(integer: Values,\n    littleEndian: boolean = true): ByteString {\n    var error = Utils.getErrorMessage(integer);\n    if (error) {\n      throwBadInputError(error);\n    }\n    var num: bigint = Utils.parseNumber(integer.numberString);\n    let max = MAX_INT_MAP.get(integer.numberType);\n    let byteCount = BYTE_COUNT_MAP.get(integer.numberType);\n    if (!max || !byteCount) {\n      throw new Error(`Unknown number type: ${integer.numberType}`);\n    }\n    if (num < 0n) {\n      num += max + 1n;\n    }\n    let hex: string = num.toString(16);\n    let missingChars = 2 * byteCount - hex.length;\n    hex = \"0\".repeat(missingChars) + hex;//padd with leading zeros\n    let bytes: ByteString = ByteString.fromHex(hex);\n    return littleEndian ? bytes.getReversed() : bytes;\n  }\n}\n","import React from 'react';\nimport ChooseOptionView from '../ChooseOptionView';\nimport * as Int from \"../../hex/Integer\";\n\nconst INT_SIZES = [Int.INT_8, Int.INT_16, Int.INT_32, Int.INT_64];\nconst LABLES = [\" as \", \" integer\"]\n\nexport default class IntegerEditView extends React.Component<Props, {}> {\n  render() {\n    return (\n      <div>\n        <input type=\"text\"\n          value={this.props.values.numberString}\n          onChange={this.onValueChange} />\n        {LABLES[0]}\n        <ChooseOptionView\n          value={this.props.values.numberType}\n          onChange={this.onTypeChange}\n          options={INT_SIZES} />\n        {LABLES[1]}\n      </div>\n    );\n  }\n\n  onTypeChange = (newValue: string) => {\n    this.onChange({ numberType: newValue });\n  }\n\n  onValueChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    // only allow certain input characters: hex and 'o' and 'x' for 0x/0b\n    const newValue = event.target.value;\n    if (/^([0-9a-fA-Fxo]*)$/.test(newValue)) {\n      this.onChange({ numberString: newValue });\n    }\n  }\n\n  onChange(changedValues: any) {\n    this.props.onChange(Object.assign({}, this.props.values, changedValues));\n  }\n}\n\ninterface Props {\n  values: Int.Values,\n  onChange: (newValues: Int.Values) => void,\n}\n","import React from 'react';\nimport * as Str from '../../hex/String';\nimport * as Common from '../../Common';\n\nconst LABELS_NORMAL = [\"Repeat \", \" exactly \", \" time(s)\"];\nconst LABELS_REVERSED = [\"Reverse \", \" and repeat it \", \" time(s)\"];\n\nexport default class StringEditView extends React.Component<Props> {\n  render() {\n    const labels = this.props.values.type === Str.TYPE_REVERSED ?\n      LABELS_REVERSED : LABELS_NORMAL;\n    return (\n      <div>\n        {labels[0]}\n        <input className=\"input-string\" type=\"text\"\n          value={this.props.values.pattern}\n          onChange={this.onPatternChange} />\n        {labels[1]}\n        <input className=\"input-count\" type=\"text\"\n          value={this.props.values.repeatCount}\n          onChange={this.onNumberChange} />\n        {labels[2]}\n      </div>);\n  }\n\n  onNumberChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (Common.isValidRepeatCountWhileEditing(event.target.value)) {\n      this.onChange({ repeatCount: event.target.value });\n    }\n  }\n\n  onPatternChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.onChange({ pattern: event.target.value });\n  }\n\n  onChange(changedValues: any) {\n    this.props.onChange(Object.assign({}, this.props.values, changedValues));\n  }\n}\n\nexport interface Props {\n  values: Str.Values,\n  onChange: (newValues: Str.Values) => void,\n}\n","import React from 'react';\n\nexport class ListItemControls extends React.Component<Props, {}> {\n  render() {\n    return (\n        <div className=\"list-item-controls\">\n          <input type=\"button\"\n            value=\"Up\"\n            onClick={this.onMoveUp}\n            disabled={this.props.index === 0} />\n          <input type=\"button\"\n            value=\"Down\"\n            onClick={this.onMoveDown}\n            disabled={this.props.isLast} />\n          <input type=\"button\"\n            value=\"Delete\"\n            onClick={this.onDelete} />\n        </div>);\n  }\n\n  onMoveUp = () => {\n    if (this.props.index > 0) {\n      this.props.onItemsSwap(this.props.index, this.props.index - 1);\n    }\n  }\n\n  onMoveDown = () => {\n    if (!this.props.isLast) {\n      this.props.onItemsSwap(this.props.index, this.props.index + 1);\n    }\n  }\n\n  onDelete = () => {\n    this.props.onItemDelete(this.props.index);\n  }\n}\n\ninterface Props {\n  index: number,\n  isLast: boolean,\n  onItemsSwap: (srcIndex: number, dstIndex: number) => void,\n  onItemDelete: (index: number) => void,\n}\n\nexport default ListItemControls;\n","import React from 'react';\nimport ChooseOptionView from '../ChooseOptionView';\nimport Padding from './PaddingEditView';\nimport Integer from './IntegerEditView';\nimport String from './StringEditView';\nimport ReorderableItemControls from '../list/ReorderableItemControls';\nimport * as Int from '../../hex/Integer';\nimport * as Pad from '../../hex/Padding';\nimport * as Str from '../../hex/String';\n\nconst TYPE_MAP = new Map<string, TypeInfos>();\nTYPE_MAP.set(Int.TYPE, { defaultValues: Int.Utils.defaultValues, viewClass: Integer });\nTYPE_MAP.set(Str.TYPE, { defaultValues: Str.Utils.defaultValues, viewClass: String });\nTYPE_MAP.set(Str.TYPE_REVERSED, { defaultValues: Str.ReversedUtils.defaultValues, viewClass: String });\nTYPE_MAP.set(Pad.TYPE, { defaultValues: Pad.Utils.defaultValues, viewClass: Padding });\nconst TYPES = [...TYPE_MAP.keys()];\n\nfunction getTypeInfo(type: string): TypeInfos {\n  let ret = TYPE_MAP.get(type);\n  if (!ret) {\n    throw Error(`Unknown type: ${type}`);\n  }\n  return ret;\n}\n\nexport default class HexElementView extends React.Component<HexElementViewProps, HexElementViewProps> {\n  render() {\n    return (\n      <tr className=\"list-item multi-colored\">\n        <td>\n          <ChooseOptionView value={this.props.data.type} options={TYPES}\n            onChange={this.onTypeChange} />\n        </td>\n        <td>\n          {this.renderChild(this.props.data.type)}\n        </td>\n        <td>\n          <ReorderableItemControls\n            index={this.props.index}\n            isLast={this.props.isLast}\n            onItemsSwap={this.props.onItemsSwap}\n            onItemDelete={this.props.onItemDelete} />\n        </td>\n      </tr>\n    );\n  }\n\n  onTypeChange = (newType: string) => {\n    this.onChange(newType, getTypeInfo(newType).defaultValues());\n  }\n\n  onChildChange = (newValues: any) => {\n    this.onChange(this.props.data.type, newValues);\n  }\n\n  onChange(newType: string, newValues: any) {\n    const newData = Object.assign(newValues, { type: newType });\n    this.props.onChange(this.props.index, newData);\n  }\n\n  renderChild(type: string): any {\n    const viewClass = getTypeInfo(type).viewClass;\n    const props = {\n      onChange: this.onChildChange,\n      values: this.props.data,\n    };\n    return React.createElement(viewClass, props);\n  }\n\n  typeToClass(type: string): any {\n    let ret = TYPE_MAP.get(type)?.viewClass;\n    if (!ret) {\n      throw Error(`Unknown type: ${type}`);\n    }\n    return ret;\n  }\n};\n\ninterface HexElementViewProps {\n  index: number,\n  data: any,\n  isLast: boolean,\n  onItemsSwap: (srcIndex: number, dstIndex: number) => void,\n  onItemDelete: (index: number) => void,\n  onChange: (index: number, newValue: any) => void,\n}\n\ninterface TypeInfos {\n  defaultValues: any,\n  viewClass: any,\n}\n","import React from 'react';\n// import ListItemView from './ReorderableListItemView';\nimport HexElementView from '../hex/HexElementView';\n\n\nexport default class ReorderableListView extends React.Component<Props, State>{\n  constructor(props: Props) {\n    super(props);\n    this.state = { entries: [], nextId: 0 };\n  }\n\n  render() {\n    return (\n      <div>\n        <h2>Hex builder</h2>\n        <table className=\"list\">\n          <thead>\n            <tr>\n              <th>Type</th>\n              <th>Configuration</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.state.entries.map((elem, index) => {\n              return (\n                <HexElementView\n                  index={index}\n                  key={elem.key}\n                  isLast={index + 1 === this.state.entries.length}\n                  onItemDelete={this.onItemDeleted}\n                  onItemsSwap={this.onItemSwapped}\n                  onChange={this.onItemChange}\n                  data={elem.data} />\n              );\n            })}\n            <tr key={-1}>\n              <td /><td>\n                <input type=\"button\" style={{ width: \"100%\" }}\n                  value=\"Add new element\"\n                  onClick={this.onItemAdd} />\n              </td><td />\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n\n  onItemAdd = () => {\n    var copy = this.state.entries.slice();\n    var data = this.props.newItemData(copy.length);\n    let entry: Entry = { key: this.state.nextId, data: data };\n    copy.push(entry);\n    this.onChange(copy, this.state.nextId + 1);\n  }\n\n  onItemChange = (index: number, newValue: Entry) => {\n    var copy = this.state.entries.slice();\n    let entry: Entry = { key: copy[index].key, data: newValue };\n    copy[index] = entry;\n    this.onChange(copy, this.state.nextId);\n  }\n\n  onItemSwapped = (indexFrom: number, indexTo: number) => {\n    var copy = this.state.entries.slice();\n    const tmp = copy[indexFrom];\n    copy[indexFrom] = copy[indexTo];\n    copy[indexTo] = tmp;\n    this.onChange(copy, this.state.nextId);\n  }\n\n  onItemDeleted = (index: number) => {\n    var copy = this.state.entries.slice();\n    copy.splice(index, 1);\n    this.onChange(copy, this.state.nextId);\n  }\n\n  onChange(newArray: Entry[], nextId: number) {\n    this.setState({ entries: newArray, nextId: nextId });\n    this.props.onChange(newArray);\n  }\n}\n\ninterface Props {\n  entryClass: any,\n  onChange: (entries: Entry[]) => void,\n  newItemData: (index: number) => any,\n}\n\ninterface State {\n  entries: Entry[],\n  nextId: number,\n}\n\ninterface Entry {\n  key: number,\n  data: any,\n}\n","import React from 'react';\nimport copy from 'copy-to-clipboard';\n\nexport default class CopyButton extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { copiedText: null };\n  }\n\n  render() {\n    const alreadyCopied = this.props.text === this.state.copiedText;\n    const buttonText = alreadyCopied ? \"Copied\" : \"Copy\";\n    return (\n      <button onClick={this.onClick}>\n        {buttonText}\n      </button>\n    );\n  }\n\n  onClick = (event: any) => {\n    const text = this.props.text;\n    copy(text);\n    this.setState({ copiedText: text });\n  }\n}\n\ninterface State {\n  copiedText: string | null,\n}\n\nexport interface Props {\n  text: string,\n}\n","import React from 'react';\nimport ChooseOptionView from './ChooseOptionView';\n\n\nexport class PresetOrCustomStringView extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    let customFormat = props.options.get(props.customOption);\n    if (customFormat === undefined) {\n      throw new Error(\"Initial value for customOption is not suppplied\");\n    }\n\n    this.state = { lastCustomValue: customFormat };\n  }\n\n  render() {\n    return (\n      <div>\n        {this.props.label}\n        <ChooseOptionView\n          value={this.props.values.option}\n          onChange={this.onTypeChange}\n          options={[...this.props.options.keys()]} />\n        {this.isCustom() ?\n          <input type=\"text\"\n            value={this.props.values.value}\n            onChange={this.onValueChange} /> : null}\n      </div>\n    );\n  }\n\n  isCustom(option: string | undefined = undefined): boolean {\n    option = option ?? this.props.values.option;\n    return option === this.props.customOption;\n  }\n\n  onTypeChange = (newType: string) => {\n    if (newType === this.props.values.option) {\n      return; //no type change\n    }\n    let value;\n    if (this.isCustom(newType)) {\n      // preset -> custom\n      // load last used custom value\n      value = this.state.lastCustomValue;\n    }\n    else {\n      if (this.isCustom()) {\n        // custom -> preset\n        // store current custom value for the future\n        this.setState({ lastCustomValue: this.props.values.value });\n      }\n      value = this.props.options.get(newType);\n      if (value === undefined) {\n        throw new Error(\"[BUG] Type has no value mapped\"); //should never happen\n      }\n    }\n    const values: Values = { option: newType, value: value };\n    this.props.onChange(values);\n  }\n\n  onValueChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (this.isCustom()) {//should be true\n      const values: Values = {\n        option: this.props.values.option,\n        value: event.target.value,\n      };\n      this.props.onChange(values);\n    }\n  }\n}\n\nexport interface Props {\n  label?: string,\n  options: Map<string, string>,\n  customOption: string,\n  values: Values,\n  onChange: (newValues: Values) => void,\n}\n\ninterface State {\n  lastCustomValue: string,//changing this has no effect on the rendering of the component\n}\n\nexport interface Values {\n  option: string,\n  value: string,\n}\n\nexport default PresetOrCustomStringView;\n","import React from 'react';\nimport Checkbox from 'rc-checkbox';\nimport { TaggedByteString, Blueprint, ByteStringBuilder } from '../../hex/ByteStringBuilder';\nimport CopyButton from '../CopyButton';\nimport * as FormatChooser from \"../PresetOrCustomString\";\n\n\nconst CUSTOM_FORMAT = \"custom\";\nconst DEFAULT_FORMAT = \"raw\";\nconst FORMAT_MAP = new Map<string, string>();\nFORMAT_MAP.set(\"python\", \"python -c 'print(\\\"%s\\\")'\");\nFORMAT_MAP.set(\"printf\", \"printf '%s'\");\nFORMAT_MAP.set(DEFAULT_FORMAT, \"%s\");\nFORMAT_MAP.set(CUSTOM_FORMAT, \"your_command --flags '%s'\")\n\nfunction escapeOutputString(unescaped: string): string {\n  // escape quote signs since they could mess up passing the payload to a program (eg printf)\n  return unescaped.replace(/'/g, \"\\\\x27\").replace(/\"/g, \"\\\\x22\")\n    // escape spaces, since the html does not handle consecutive whitespaces well\n    .replace(/ /g, \"\\\\x20\");\n}\n\nexport default class OutputView extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    const default_format_value = FORMAT_MAP.get(DEFAULT_FORMAT) ?? \"%s\";\n    this.state = {\n      format: { option: DEFAULT_FORMAT, value: default_format_value },\n      isLittleEndian: true,\n    };\n  }\n\n  render() {\n    var error;\n    const parts = this.state.format.value.split(\"%s\");\n    if (parts.length !== 2) {\n      error = 'Format has to contain exactly one \"%s\" (without the quotes)';\n    }\n\n    let escapedTaggedStrings: TaggedString[] = [];//to make the type check happy\n    let result = new ByteStringBuilder(this.state.isLittleEndian)\n      .getBytesStrings(this.props.blueprints);\n    if (result.errorMessage) {\n      error = result.errorMessage\n    } else {\n      escapedTaggedStrings = result.byteStrings.map((bs: TaggedByteString) => {\n        let taggedStr: TaggedString = {\n          key: bs.key,\n          str: escapeOutputString(bs.data.str),\n        };\n        return taggedStr;\n      });\n    }\n    let textToCopy = escapedTaggedStrings.map((tbs) => { return tbs.str }).join(\"\");\n    textToCopy = parts[0] + textToCopy + parts[1];\n\n    return (\n      <div>\n        <label>\n          <Checkbox\n            checked={this.state.isLittleEndian}\n            onChange={this.onEndianChange}\n          />\n              use little endian\n            </label>\n        <FormatChooser.PresetOrCustomStringView options={FORMAT_MAP}\n          values={this.state.format}\n          customOption={CUSTOM_FORMAT}\n          onChange={this.onFormatChange}\n          label=\"Output format: \" />\n        <br />\n        {error ?\n          <span className=\"err-msg\">{error}</span> :\n          <div className=\"byteOutput\">\n            <CopyButton text={textToCopy} />\n            <br />\n            {parts[0]}\n            <span>\n              {escapedTaggedStrings.map((value: TaggedString) => {\n                return <span className=\"multi-colored\" key={value.key}>{value.str}</span>;\n              })}\n            </span>\n            {parts[1]}\n          </div>\n        }\n      </div>\n    );\n  }\n\n  onFormatChange = (newFormat: FormatChooser.Values) => {\n    this.setState({ format: newFormat });\n  }\n\n  onEndianChange = (event: any) => {\n    this.setState({ isLittleEndian: event.target.checked });\n  }\n}\n\ninterface Props {\n  blueprints: Blueprint[],\n}\n\ninterface State {\n  format: FormatChooser.Values,\n  isLittleEndian: boolean,\n}\n\ninterface TaggedString {\n  str: string,\n  key: number,\n}\n","import React from 'react';\nimport './App.scss';\nimport HexBuilderListView from './app/views/list/ReorderableListView';\nimport OutputView from './app/views/hex/OutputView';\nimport HexElementView from './app/views/hex/HexElementView';\nimport * as Str from './app/hex/String';\n\n// TODO: next steps\n//  - CSS\n\nexport default class App extends React.Component<any, State> {\n  constructor(props: any) {\n    super(props);\n    this.state = { blueprints: [] }\n  }\n\n  render() {\n    return (\n      <div className=\"app-root\">\n        <a href=\"http://six-two.github.io/react_payload_builder\">\n          View the Gitlab Pages version\n        </a>\n        <HexBuilderListView\n          onChange={this.onListChange}\n          entryClass={HexElementView}\n          newItemData={(index: number) => {\n            var v: any = Str.Utils.defaultValues();\n            v.repeatCount = index + 1;\n            return v;\n          }} />\n        <OutputView blueprints={this.state.blueprints} />\n      </div>\n    );\n  }\n\n  onListChange = (newBlueprints: Blueprint[]) => {\n    this.setState({ blueprints: newBlueprints });\n  }\n}\n\ninterface State {\n  blueprints: Blueprint[],\n}\n\ninterface Blueprint {\n  key: number,\n  data: any,\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}