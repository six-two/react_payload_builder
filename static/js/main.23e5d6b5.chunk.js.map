{"version":3,"sources":["app/views/ChooseOptionView.tsx","app/Common.ts","app/views/hex/PaddingEditView.tsx","app/hex/ByteString.ts","app/hex/Padding.ts","app/hex/String.ts","app/hex/ByteStringBuilder.ts","app/hex/Integer.ts","app/views/hex/IntegerEditView.tsx","app/views/hex/StringEditView.tsx","app/views/ItemControls.tsx","app/views/hex/HexElementView.tsx","app/views/hex/InputTable.tsx","app/redux/actions.ts","app/ClipboardManager.ts","app/views/CopyButton.tsx","app/views/PresetOrCustomString.tsx","app/views/hex/FormatChooser.tsx","app/hex/Escaper.ts","app/views/hex/HexDumpView.tsx","app/views/hex/ColoredHexStringView.tsx","app/views/hex/EndianToggleView.tsx","app/views/hex/OutputView.tsx","app/redux/reducer.ts","app/redux/store.ts","app/redux/persistence.ts","app/views/hex/ExportUriView.tsx","App.tsx","serviceWorker.js","index.js"],"names":["ChooseOptionView","onChange","event","props","target","value","this","key","disabled","hidden","prompt","options","map","i","React","Component","toHex","length","toString","toUpperCase","padStart","isValidRepeatCountWhileEditing","repeatCountString","repeatCount","Number","isNaN","LABELS","PaddingEditView","onNumberChange","Common","paddToLength","onPatternChange","pattern","className","type","values","changedValues","Object","assign","hexEscapeRegex","ByteString","bytes","join","other","push","copy","reverse","n","repeated","str","slice","match","hex","Error","len","result","Array","Utils","padding","previousByteStrings","offset","missing","throwBadInputError","patternBytes","fromString","Math","floor","incompleteSize","incompletePadding","ReversedUtils","reversed","ERROR_BYTE_STRING","data","message","e","name","buildOutput","state","res","blueprintList","isLittleEndian","processed","previous","toBytes","entry","byteStrings","errorMessage","getBytesStrings","persistent","entries","list","outputBuilderResult","blueprint","Padding","paddingToBytes","Int","integerToBytes","Str","stringToBytes","TYPE","MAX_INT_MAP","Map","set","BYTE_COUNT_MAP","numberString","numberType","integer","num","parseNumber","maxOrNull","get","max","BigInt","string","replace","littleEndian","error","getErrorMessage","byteCount","missingChars","repeat","fromHex","INT_SIZES","LABLES","IntegerEditView","onTypeChange","newValue","onValueChange","test","LABELS_NORMAL","LABELS_REVERSED","StringEditView","labels","ItemControls","onMoveUp","index","onItemsSwap","onMoveDown","isLast","onDelete","onItemDelete","upClassName","undefined","downClassName","onClick","aria-hidden","TYPE_MAP","defaultValues","viewClass","Integer","String","Pad","TYPES","keys","getTypeInfo","ret","HexElementView","newType","onChildChange","newValues","renderChild","newData","createElement","InputTable_","elem","deleteListItem","swapListItems","updateItem","colSpan","addListItem","deleteAllListItems","InputTable","connect","ownProps","dispatch","indexA","indexB","payload","listItemSwap","listItemDelete","listItemChanged","instance","text","CopyButton_","ClipbordManager","canCopy","copyCurrent","setState","updateCounterWhenCopied","updateCounter","buttonText","CopyButton","PresetOrCustomStringView","newOption","newState","selected","customOption","custom","tmp","onStateChange","onTextChange","label","FORMAT_MAP","DEFAULT_FORMAT_STATE","FormatChooser_","PresetOrCustomString","format","setFormat","FormatChooser","REGEX_PLUS","REGEX_SLASH","REGEX_EQUAL","REGEX_MINUS","REGEX_UNDERSCORE","escapeBytes","unescaped","escapeFunction","urlEscapeByte","byte","encodeURIComponent","byteToValue","parseInt","charCodeAt","toHexdumpChar","numVal","fromCharCode","byteToHex","printfEscapeByte","ColoredHexDumpView_","bytesPerRow","showOffset","showAscii","builderResult","renderErrorMessage","rows","missingInRow","items","toAdd","color","renderRow","ascii","extraClass","headerRow","offsets","min","array","range","paddingChar","startPadding","ceil","endPadding","centerString","row","item","colorClass","hexString","Esc","asciiString","ClipboardManager","setTextToCopy","ColoredHexDumpView","formatString","INSERT_HERE_REGEX","ColoredHexStringView_","split","escapedTaggedStrings","bs","textToCopy","tbs","ColoredHexStringView","EndianToggleView_","isVisible","checked","toggleEndian","blueprints","EndianToggleView","OutputView_","OutputView","reducer","action","console","warn","fallbackState","nextId","newEntry","StringUtils","splice","updateList","devTools","window","__REDUX_DEVTOOLS_EXTENSION__","trace","traceLimit","store","createStore","exportToUri","stateString","s","le","f","v","c","l","x","log","btoa","uriSafeEncode","JSON","stringify","serialize","getState","urlBuilder","URL","location","href","searchParams","tryImportFromString","jsonText","tryOrMessage","base64","lastBlockSize","atob","uriSafeDecode","parse","unminimizeState","deserialize","fn","ExportUriView_","url","ExportUriView","App_","id","App","Boolean","hostname","tryImportFromUri","info","alert","importData","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.23e5d6b5.chunk.js","sourcesContent":["import React from 'react';\n\nexport class ChooseOptionView extends React.Component<ChooseOptionViewProps, {}> {\n  static defaultValue(): string {\n    return \"\";\n  }\n\n  render() {\n    return (<select onChange={(event) => { this.props.onChange(event.target.value) }} value={this.props.value}>\n      <option value=\"\" key={-1} disabled hidden>\n        {this.props.prompt ? this.props.prompt : \"Choose a option\"}\n      </option>\n      {this.props.options.map((value: string, i: number) => {\n        // Here using key=index should be ok, since the order should not change\n        return <option value={value} key={i}>{value}</option>;\n      })}\n    </select>);\n  }\n}\n\nexport interface ChooseOptionViewProps {\n  prompt?: string,\n  value: string,\n  options: string[],\n  onChange: (newValue: string) => void,\n}\n\nexport default ChooseOptionView;\n","// Do not allow arbitrary large values for repeatCount, paddToLength, etc to\n// prevent you from accidentially DoS'ing yourself. Happened to me ;D\nexport const MAX_REPEAT_INT = 100000 - 1;\nexport const OUTPUT_COLORS = [\"red\", \"green\", \"blue\"];\n\nexport function toHex(value: number, length: number = 2){\n  return value.toString(16).toUpperCase().padStart(length, \"0\")\n}\n\nexport function range(min: number, max: number): number[] {\n  let array = [];\n  for (let i = min; i < max; i++) {\n    array.push(i);\n  }\n  return array;\n}\n\nexport function centerString(text: string, length: number, paddingChar: string) {\n  paddingChar = paddingChar[0];\n  let missing = length - text.length;\n  if (missing > 0) {\n    let startPadding = Math.ceil(missing / 2);\n    let endPadding = Math.floor(missing / 2);\n    text = paddingChar.repeat(startPadding) + text + paddingChar.repeat(endPadding);\n  }\n  return text;\n}\n\nexport function isValidRepeatCountWhileEditing(repeatCountString: string): boolean {\n  if (repeatCountString === \"\") {\n    // allow the empty string while editing\n    return true;\n  } else {\n    const repeatCount = Number(repeatCountString);\n    return (!isNaN(repeatCount)) && (repeatCount > 0) && (repeatCount <= MAX_REPEAT_INT);\n  }\n}\n\nexport function clamp(minInclusive: number, value: number, maxInclusive: number) {\n  return Math.max(minInclusive, Math.min(value, maxInclusive));\n};\n","import React from 'react';\nimport * as Padding from '../../hex/Padding';\nimport * as Common from '../../Common';\n\nconst LABELS = [\"Repeat \", \" up to index \"];\n\nexport default class PaddingEditView extends React.Component<Props> {\n  render() {\n    return (\n      <div className=\"edit-container\">\n        {LABELS[0]}\n        <input className=\"input-string\" type=\"text\"\n          value={this.props.values.pattern}\n          onChange={this.onPatternChange} />\n        {LABELS[1]}\n        <input className=\"input-count\" type=\"text\"\n          value={this.props.values.paddToLength}\n          onChange={this.onNumberChange} />\n      </div>);\n  }\n\n  onNumberChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (Common.isValidRepeatCountWhileEditing(event.target.value)) {\n      this.onChange({ paddToLength: event.target.value });\n    }\n  }\n\n  onPatternChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.onChange({ pattern: event.target.value });\n  }\n\n  onChange(changedValues: any) {\n    this.props.onChange(Object.assign({}, this.props.values, changedValues));\n  }\n}\n\nexport interface Props {\n  values: Padding.Values,\n  onChange: (newValues: Padding.Values) => void,\n}\n","const hexEscapeRegex = /\\x[0-9a-fA-F]{2}/\n\nexport default class ByteString {\n  bytes: string[];\n\n  constructor(bytes: string[]) {\n    this.bytes = bytes;\n  }\n\n  get length(): number {\n    return this.bytes.length;\n  }\n\n  toString(): string {\n    return this.bytes.join(\"\");\n  }\n\n  append(other: ByteString) {\n    this.bytes.push(...other.bytes);\n  }\n\n  reversed(): ByteString {\n    let copy = [...this.bytes];\n    copy.reverse();\n    return new ByteString(copy);\n  }\n\n  repeated(n: number): ByteString {\n    let repeated = [];\n    for (let i = 0; i < n; i++) {\n      repeated.push(...this.bytes);\n    }\n    return new ByteString(repeated);\n  }\n\n  static fromString(str: string): ByteString {\n    let bytes: string[] = [];\n    let i = 0;\n    while (i < str.length) {\n      let slice = str.slice(i, i + 4);\n      if (slice.match(hexEscapeRegex)) {\n        // add \"\\x??\" as one byte\n        bytes.push(slice);\n        i += 4;\n      } else {\n        bytes.push(str[i]);\n        i += 1;\n      }\n    }\n    return new ByteString(bytes);\n  }\n\n  static fromHex(hex: string): ByteString {\n    if (hex.length % 2 === 1) {\n      throw new Error(\"Hex has odd length\");\n    }\n    const len = hex.length / 2;\n    let result = Array(len);\n    for (var i = 0; i < len; i++) {\n      result[i] = \"\\\\x\" + hex.slice(2 * i, 2 * i + 2);\n    }\n    return new ByteString(result);\n  }\n}\n","import ByteString from \"./ByteString\";\nimport {throwBadInputError} from \"./ByteStringBuilder\";\n\nexport interface Values {\n  paddToLength: number,\n  pattern: string,\n  type: string,\n}\n\nexport const TYPE = \"Padding\";\n\n\nexport class Utils {\n  static defaultValues(): Values {\n    return {\n      pattern: \"A\",\n      paddToLength: 1,\n      type: TYPE,\n    };\n  }\n\n  static paddingToBytes(padding: Values, previousByteStrings: ByteString[]): ByteString {\n    var offset = 0;\n    for (var i = 0; i < previousByteStrings.length; i++) {\n      offset += previousByteStrings[i].bytes.length;\n    }\n    var missing = padding.paddToLength - offset;\n    if (missing < 0) {\n      throwBadInputError(`Padding should be applied up to index ${padding.paddToLength}, but the string is already longer than that (length=${offset})`);\n    }\n    if (!padding.pattern) {\n      throwBadInputError(\"Padding can not be empty\");\n    }\n\n    const patternBytes = ByteString.fromString(padding.pattern);\n    const repeatCount = Math.floor(missing / patternBytes.length);\n    const incompleteSize = missing - (repeatCount * patternBytes.length)\n\n    const incompletePadding: string[] = patternBytes.bytes.slice(0, incompleteSize);\n    let repeated = patternBytes.repeated(repeatCount);\n    repeated.bytes.push(...incompletePadding);\n    return repeated;\n  }\n}\n\nexport default Values;\n","import ByteString from \"./ByteString\";\n\nexport interface Values {\n  repeatCount: number,\n  pattern: string,\n  type: string,\n}\n\nexport const TYPE = \"String\";\nexport const TYPE_REVERSED = \"String (reversed)\";\n\n\nexport class Utils {\n  static defaultValues(): Values {\n    return {\n      pattern: \"A\",\n      repeatCount: 1,\n      type: TYPE,\n    };\n  }\n\n  static stringToBytes(values: Values): ByteString {\n    let bytes = ByteString.fromString(values.pattern);\n    return bytes.repeated(values.repeatCount);\n  }\n}\n\nexport class ReversedUtils {\n  static defaultValues(): Values {\n    return {\n      pattern: \"A\",\n      repeatCount: 1,\n      type: TYPE_REVERSED,\n    };\n  }\n\n  static stringToBytes(values: Values): ByteString {\n    let bytes = ByteString.fromString(values.pattern);\n    return bytes.reversed().repeated(values.repeatCount);\n  }\n}\n\nexport default Values;\n","import { ListEntry, State } from '../redux/store';\nimport * as Padding from './Padding';\nimport * as Int from './Integer';\nimport * as Str from './String';\nimport ByteString from './ByteString';\n\nconst BAD_INPUT_ERROR_NAME = \"BadInputError\";\nconst ERROR_BYTE_STRING: TaggedByteString = {\n  key: -1,\n  data: ByteString.fromString(\"Error: Please check your inputs. @dev: This message should not be shown\"),\n}\n\nexport function throwBadInputError(message: string) {\n  // This function creates an error that signals, that it was caused by bad user input\n  let e = new Error(message || \"Something went wrong. Please check your inputs\")\n  e.name = BAD_INPUT_ERROR_NAME;\n  throw e;\n}\n\nexport function buildOutput(state: State): State {\n  let res = getBytesStrings(state.persistent.entries.list, state.persistent.isLittleEndian);\n  return {\n    ...state,\n    outputBuilderResult: res,\n  };\n}\n\nfunction getBytesStrings(blueprintList: ListEntry[], isLittleEndian: boolean): BuilderResult {\n  let i: number = 0;\n  try {\n    let processed: TaggedByteString[] = [];\n    let previous: ByteString[] = [];\n    for (i = 0; i < blueprintList.length; i++) {\n      let bytes: ByteString = toBytes(blueprintList[i].data, previous, isLittleEndian);\n      let entry = { key: blueprintList[i].key, data: bytes };\n      previous.push(bytes);\n      processed.push(entry);\n    }\n    return { byteStrings: processed };\n  } catch (e) {\n    if (e.name === BAD_INPUT_ERROR_NAME) {\n      return { errorMessage: `Error in input ${i + 1}: ${e.message}`, byteStrings: [ERROR_BYTE_STRING] };\n    } else {\n      throw e;\n    }\n  }\n}\n\nfunction toBytes(blueprint: AnyValues, previousByteStrings: ByteString[], isLittleEndian: boolean): ByteString {\n  switch (blueprint.type) {\n    case Padding.TYPE:\n      return Padding.Utils.paddingToBytes(blueprint as Padding.Values, previousByteStrings);\n    case Int.TYPE:\n      return Int.Utils.integerToBytes(blueprint as Int.Values, isLittleEndian);\n    case Str.TYPE:\n      return Str.Utils.stringToBytes(blueprint as Str.Values);\n    case Str.TYPE_REVERSED:\n      return Str.ReversedUtils.stringToBytes(blueprint as Str.Values);\n    default:\n      throw new Error(\"Unknown type\");\n  }\n}\n\nexport function isValid(blueprint: AnyValues): boolean {\n  try {\n    toBytes(blueprint, [], true);//will throw error if is not valid\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nexport type AnyValues = Padding.Values | Int.Values | Str.Values;\n\n\nexport interface BuilderResult {\n  byteStrings: TaggedByteString[],\n  errorMessage?: string,\n}\n\nexport interface TaggedByteString {\n  key: number,\n  data: ByteString,\n}\n","import ByteString from \"./ByteString\";\nimport {throwBadInputError} from \"./ByteStringBuilder\";\n\nexport const INT_8 = \"8 bit\";\nexport const INT_16 = \"16 bit\";\nexport const INT_32 = \"32 bit\";\nexport const INT_64 = \"64 bit\";\nexport const TYPE = \"Integer\";\n\nconst MAX_INT_MAP = new Map<string, bigint>();\nMAX_INT_MAP.set(INT_8, 0xffn);\nMAX_INT_MAP.set(INT_16, 0xffffn);\nMAX_INT_MAP.set(INT_32, 0xffffffffn);\nMAX_INT_MAP.set(INT_64, 0xffffffffffffffffn);\n\nconst BYTE_COUNT_MAP = new Map<string, number>();\nBYTE_COUNT_MAP.set(INT_8, 1);\nBYTE_COUNT_MAP.set(INT_16, 2);\nBYTE_COUNT_MAP.set(INT_32, 4);\nBYTE_COUNT_MAP.set(INT_64, 8);\n\nexport interface Values {\n  numberString: string,\n  numberType: string,\n  type: string,\n}\n\nexport class Utils {\n  static defaultValues(): Values {\n    return {\n      numberString: \"0x41414141\",\n      numberType: INT_32,\n      type: TYPE,\n    };\n  }\n\n  static getErrorMessage(integer: Values) {\n    try {\n      var num: bigint = Utils.parseNumber(integer.numberString);\n      const type: string = integer.numberType;\n      let maxOrNull = MAX_INT_MAP.get(type);\n      if (!maxOrNull) {\n        throw new Error(`Unknown number type: ${type}`);\n      } else {\n        let max: bigint = maxOrNull;\n        if (num > max) {\n          return `Number to big for '${type}'`;\n        }\n        if (num < 0n) {\n          const min: bigint = (max + 1n) / BigInt(-2);\n          if (num < min) {\n            return `Number to big for '${type}'`;\n          }\n        }\n      }\n    } catch (e) {\n      return \"Parsing integer failed\";\n    }\n  }\n\n  static parseNumber(string: string): bigint {\n    // Remove characters that can be used to make strings more human readable\n    string = string.replace(/[\\s_]+/g, \"\");\n    return BigInt(string);\n  }\n\n\n  static integerToBytes(integer: Values,\n    littleEndian: boolean = true): ByteString {\n    var error = Utils.getErrorMessage(integer);\n    if (error) {\n      throwBadInputError(error);\n    }\n    var num: bigint = Utils.parseNumber(integer.numberString);\n    let max = MAX_INT_MAP.get(integer.numberType);\n    let byteCount = BYTE_COUNT_MAP.get(integer.numberType);\n    if (!max || !byteCount) {\n      throw new Error(`Unknown number type: ${integer.numberType}`);\n    }\n    if (num < 0n) {\n      num += max + 1n;\n    }\n    let hex: string = num.toString(16);\n    let missingChars = 2 * byteCount - hex.length;\n    hex = \"0\".repeat(missingChars) + hex;//padd with leading zeros\n    let bytes: ByteString = ByteString.fromHex(hex);\n    return littleEndian ? bytes.reversed() : bytes;\n  }\n}\n","import React from 'react';\nimport ChooseOptionView from '../ChooseOptionView';\nimport * as Int from \"../../hex/Integer\";\n\nconst INT_SIZES = [Int.INT_8, Int.INT_16, Int.INT_32, Int.INT_64];\nconst LABLES = [\" as \", \" integer\"]\n\nexport default class IntegerEditView extends React.Component<Props, {}> {\n  render() {\n    return (\n      <div className=\"edit-container\">\n        <input type=\"text\"\n          value={this.props.values.numberString}\n          onChange={this.onValueChange} />\n        {LABLES[0]}\n        <ChooseOptionView\n          value={this.props.values.numberType}\n          onChange={this.onTypeChange}\n          options={INT_SIZES} />\n        {LABLES[1]}\n      </div>\n    );\n  }\n\n  onTypeChange = (newValue: string) => {\n    this.onChange({ numberType: newValue });\n  }\n\n  onValueChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    // only allow certain input characters: hex and 'o' and 'x' for 0x/0b\n    const newValue = event.target.value;\n    if (/^([0-9a-fA-Fxo]*)$/.test(newValue)) {\n      this.onChange({ numberString: newValue });\n    }\n  }\n\n  onChange(changedValues: any) {\n    this.props.onChange(Object.assign({}, this.props.values, changedValues));\n  }\n}\n\ninterface Props {\n  values: Int.Values,\n  onChange: (newValues: Int.Values) => void,\n}\n","import React from 'react';\nimport * as Str from '../../hex/String';\nimport * as Common from '../../Common';\n\nconst LABELS_NORMAL = [\"\", \" repeated \", \" time(s)\"];\nconst LABELS_REVERSED = [\"Reverse \", \" and repeat it \", \" time(s)\"];\n\nexport default class StringEditView extends React.Component<Props> {\n  render() {\n    const labels = this.props.values.type === Str.TYPE_REVERSED ?\n      LABELS_REVERSED : LABELS_NORMAL;\n    return (\n      <div className=\"edit-container\">\n        {labels[0]}\n        <input className=\"input-string\" type=\"text\"\n          value={this.props.values.pattern}\n          onChange={this.onPatternChange} />\n        {labels[1]}\n        <input className=\"input-count\" type=\"text\"\n          value={this.props.values.repeatCount}\n          onChange={this.onNumberChange} />\n        {labels[2]}\n      </div>);\n  }\n\n  onNumberChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (Common.isValidRepeatCountWhileEditing(event.target.value)) {\n      this.onChange({ repeatCount: event.target.value });\n    }\n  }\n\n  onPatternChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.onChange({ pattern: event.target.value });\n  }\n\n  onChange(changedValues: any) {\n    this.props.onChange(Object.assign({}, this.props.values, changedValues));\n  }\n}\n\nexport interface Props {\n  values: Str.Values,\n  onChange: (newValues: Str.Values) => void,\n}\n","import React from 'react';\n\nexport class ItemControls extends React.Component<Props, {}> {\n  render() {\n    let upClassName = this.props.index === 0 ? \"disabled-button\" : undefined;\n    let downClassName = this.props.isLast ? \"disabled-button\" : undefined;\n    return (\n      <div className=\"list-item-controls\">\n        <button\n          className={upClassName}\n          onClick={this.onMoveUp}\n          disabled={this.props.index === 0} >\n          <i className=\"fa fa-arrow-up\" aria-hidden=\"true\" />\n        </button>\n\n        <button\n          className={downClassName}\n          value=\"Down\"\n          onClick={this.onMoveDown}\n          disabled={this.props.isLast} >\n          <i className=\"fa fa-arrow-down\" aria-hidden=\"true\" />\n        </button>\n        <button\n          value=\"Delete\"\n          onClick={this.onDelete} >\n          <i className=\"fa fa-trash\" aria-hidden=\"true\" />\n        </button>\n      </div>);\n  }\n\n  onMoveUp = () => {\n    if (this.props.index > 0) {\n      this.props.onItemsSwap(this.props.index, this.props.index - 1);\n    }\n  }\n\n  onMoveDown = () => {\n    if (!this.props.isLast) {\n      this.props.onItemsSwap(this.props.index, this.props.index + 1);\n    }\n  }\n\n  onDelete = () => {\n    this.props.onItemDelete(this.props.index);\n  }\n}\n\ninterface Props {\n  index: number,\n  isLast: boolean,\n  onItemsSwap: (srcIndex: number, dstIndex: number) => void,\n  onItemDelete: (index: number) => void,\n}\n\nexport default ItemControls;\n","import React from 'react';\nimport ChooseOptionView from '../ChooseOptionView';\nimport Padding from './PaddingEditView';\nimport Integer from './IntegerEditView';\nimport String from './StringEditView';\nimport ReorderableItemControls from '../ItemControls';\nimport * as Int from '../../hex/Integer';\nimport * as Pad from '../../hex/Padding';\nimport * as Str from '../../hex/String';\nimport {AnyValues} from '../../hex/ByteStringBuilder';\n\nconst TYPE_MAP = new Map<string, TypeInfos>();\nTYPE_MAP.set(Int.TYPE, { defaultValues: Int.Utils.defaultValues, viewClass: Integer });\nTYPE_MAP.set(Str.TYPE, { defaultValues: Str.Utils.defaultValues, viewClass: String });\nTYPE_MAP.set(Str.TYPE_REVERSED, { defaultValues: Str.ReversedUtils.defaultValues, viewClass: String });\nTYPE_MAP.set(Pad.TYPE, { defaultValues: Pad.Utils.defaultValues, viewClass: Padding });\nconst TYPES = [...TYPE_MAP.keys()];\n\nfunction getTypeInfo(type: string): TypeInfos {\n  let ret = TYPE_MAP.get(type);\n  if (!ret) {\n    throw Error(`Unknown type: ${type}`);\n  }\n  return ret;\n}\n\nexport default class HexElementView extends React.Component<HexElementViewProps, HexElementViewProps> {\n  render() {\n    return (\n      <tr className=\"list-item multi-colored\">\n        <td>\n          <ChooseOptionView value={this.props.data.type} options={TYPES}\n            onChange={this.onTypeChange} />\n        </td>\n        <td>\n          {this.renderChild(this.props.data.type)}\n        </td>\n        <td>\n          <ReorderableItemControls\n            index={this.props.index}\n            isLast={this.props.isLast}\n            onItemsSwap={this.props.onItemsSwap}\n            onItemDelete={this.props.onItemDelete} />\n        </td>\n      </tr>\n    );\n  }\n\n  onTypeChange = (newType: string) => {\n    this.onChange(newType, getTypeInfo(newType).defaultValues());\n  }\n\n  onChildChange = (newValues: AnyValues) => {\n    this.onChange(this.props.data.type, newValues);\n  }\n\n  onChange(newType: string, newValues: AnyValues) {\n    const newData = Object.assign(newValues, { type: newType });\n    this.props.onChange(this.props.index, newData);\n  }\n\n  renderChild(type: string): any {\n    const viewClass = getTypeInfo(type).viewClass;\n    const props = {\n      onChange: this.onChildChange,\n      values: this.props.data,\n    };\n    return React.createElement(viewClass, props);\n  }\n\n  typeToClass(type: string): any {\n    let ret = TYPE_MAP.get(type)?.viewClass;\n    if (!ret) {\n      throw Error(`Unknown type: ${type}`);\n    }\n    return ret;\n  }\n};\n\ninterface HexElementViewProps {\n  index: number,\n  data: AnyValues,\n  isLast: boolean,\n  onItemsSwap: (srcIndex: number, dstIndex: number) => void,\n  onItemDelete: (index: number) => void,\n  onChange: (index: number, newValue: AnyValues) => void,\n}\n\ninterface TypeInfos {\n  defaultValues: () => AnyValues,\n  viewClass: any,\n}\n","import React from 'react';\nimport HexElementView from '../hex/HexElementView';\nimport { AnyValues } from '../../hex/ByteStringBuilder';\nimport { connect } from 'react-redux';\nimport { ListEntry, State as ReduxState } from '../../redux/store';\nimport {\n  listItemAdd, listItemDelete, listItemSwap,  listItemDeleteAll, listItemChanged\n} from '../../redux/actions';\n\n\nclass InputTable_ extends React.Component<Props>{\n  render() {\n    return (\n      <table className=\"input-table\">\n        <thead>\n          <tr>\n            <th>Type</th>\n            <th>Configuration</th>\n            <th>Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {this.props.entries.map((elem, index) => {\n            return (\n              <HexElementView\n                index={index}\n                key={elem.key}\n                isLast={index + 1 === this.props.entries.length}\n                onItemDelete={this.props.deleteListItem}\n                onItemsSwap={this.props.swapListItems}\n                onChange={this.props.updateItem}\n                data={elem.data} />\n            );\n          })}\n          <tr key={-1} className=\"row-buttons\">\n            <td colSpan={2}>\n              <button onClick={this.props.addListItem}>\n                Add new element\n                </button>\n            </td>\n            <td>\n              <button onClick={this.props.deleteAllListItems}>\n                Delete all\n              </button>\n            </td>\n          </tr>\n        </tbody>\n      </table >\n    );\n  }\n}\n\nexport interface Props {\n  entries: ListEntry[],\n  addListItem: () => void,\n  swapListItems: (indexA: number, indexB: number) => void,\n  deleteListItem: (index: number) => void,\n  deleteAllListItems: () => void,\n  updateItem: (index: number, newValue: AnyValues) => void,\n}\n\nconst mapStateToProps = (state: ReduxState, ownProps: any) => {\n  return {\n    ...ownProps,\n    entries: state.persistent.entries.list,\n  };\n};\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    addListItem: () => dispatch(listItemAdd()),\n    swapListItems: (indexA: number, indexB: number) => dispatch(listItemSwap(indexA, indexB)),\n    deleteListItem: (index: number) => dispatch(listItemDelete(index)),\n    deleteAllListItems: () => dispatch(listItemDeleteAll()),\n    updateItem: (index: number, newValue: AnyValues) => dispatch(listItemChanged(index, newValue)),\n  };\n};\n\nconst InputTable = connect(mapStateToProps, mapDispatchToProps)(InputTable_);\nexport default InputTable;\n","import { FormatState, State } from './store';\nimport { AnyValues } from '../hex/ByteStringBuilder';\n\n\n// action types\nexport const NOOP = \"NOOP\";\nexport const FORMAT_CHANGED = \"FORMAT_CHANGED\";\nexport const ENDIAN_TOGGLE = \"ENDIAN_TOGGLE\";\nexport const LIST_ADD = \"LIST_ADD\";\nexport const LIST_DELETE = \"LIST_DELETE\";\nexport const LIST_DELETE_ALL = \"LIST_DELETE_ALL\";\nexport const LIST_SWAP = \"LIST_SWAP\";\nexport const LIST_ITEM_UPDATE = \"LIST_ITEM_UPDATE\";\nexport const UPDATED_CLIPBORD_MANAGER = \"UPDATED_CLIPBORD_MANAGER\";\nexport const SET_STATE = \"SET_STATE\";\n\n// action payloads\nexport interface ListItemChangePayload {\n  index: number,\n  newValue: AnyValues,\n}\n\nexport interface ListSwapPayload {\n  indexA: number,\n  indexB: number,\n}\n\n// actions\nexport interface ActionWithoutPayload {\n  type: string,\n}\n\nexport interface FormatChangeAction {\n  type: string,\n  payload: FormatState,\n}\n\nexport interface SetStateAction {\n  type: string,\n  payload: State,\n}\n\nexport interface ListSwapAction {\n  type: string,\n  payload: ListSwapPayload,\n}\n\nexport interface ListDeleteAction {\n  type: string,\n  payload: number,\n}\n\nexport interface ListItemChangeAction {\n  type: string,\n  payload: ListItemChangePayload,\n}\n\nexport type Action = ActionWithoutPayload | FormatChangeAction |\n  SetStateAction | ListSwapAction | ListDeleteAction | ListItemChangeAction;\n\n// action creators\nexport function setFormat(format: FormatState): FormatChangeAction {\n  return {\n    type: FORMAT_CHANGED,\n    payload: format,\n  };\n}\n\nexport function toggleEndian(): ActionWithoutPayload {\n  return { type: ENDIAN_TOGGLE };\n}\n\n\nexport function listItemAdd(): ActionWithoutPayload {\n  return { type: LIST_ADD };\n}\n\nexport function listItemDelete(index: number): ListDeleteAction {\n  return { type: LIST_DELETE, payload: index };\n}\n\nexport function listItemSwap(indexA: number, indexB: number): ListSwapAction {\n  return { type: LIST_SWAP, payload: { indexA: indexA, indexB: indexB } };\n}\n\nexport function listItemDeleteAll(): ActionWithoutPayload {\n  return { type: LIST_DELETE_ALL };\n}\n\nexport function listItemChanged(index: number, newValue: AnyValues): ListItemChangeAction {\n  return { type: LIST_ITEM_UPDATE, payload: { index: index, newValue: newValue } };\n}\n\nexport function setState(newState: State): SetStateAction {\n  return { type: SET_STATE, payload: newState };\n}\n","import copy from 'copy-to-clipboard';\n\nexport class ClipboardManager {\n  text: string | null;\n\n  constructor() {\n    this.text = \"\";\n  }\n\n  setTextToCopy(text: string | null): void {\n    if (text !== this.text) {\n      this.text = text;\n    }\n  }\n\n  copyCurrent(): void {\n    if (this.text !== null) {\n      copy(this.text);\n    }\n  }\n\n  canCopy(): boolean {\n    return this.text !== null;\n  }\n}\n\nexport const instance: ClipboardManager = new ClipboardManager();\n\nexport default instance;\n","import React from 'react';\nimport ClipbordManager from '../ClipboardManager';\nimport { connect } from 'react-redux';\nimport { State as ReduxState } from '../redux/store';\n\n\nclass CopyButton_ extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { updateCounterWhenCopied: -1 };\n  }\n\n  render() {\n    if (!ClipbordManager.canCopy()) {\n      return null;\n    }\n\n    const isCopied = this.props.updateCounter === this.state.updateCounterWhenCopied;\n    const buttonText = isCopied ? \"Copied\" : \"Copy\";\n    return (\n      <button\n        className=\"copy-button\"\n        onClick={this.onClick}>\n        {buttonText}\n      </button>\n    );\n  }\n\n  onClick = (event: any) => {\n    if (ClipbordManager.canCopy()) {\n      ClipbordManager.copyCurrent();\n      this.setState({ updateCounterWhenCopied: this.props.updateCounter });\n    }\n  }\n}\n\nexport interface Props {\n  updateCounter: number,\n}\n\nexport interface State {\n  updateCounterWhenCopied: number,\n}\n\nconst mapStateToProps = (state: ReduxState, ownProps: any) => {\n  return {\n    ...ownProps,\n    updateCounter: state.updateCounter,\n  };\n};\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n  };\n};\n\nconst CopyButton = connect(mapStateToProps, mapDispatchToProps)(CopyButton_);\nexport default CopyButton;\n","import React from 'react';\nimport ChooseOptionView from './ChooseOptionView';\nimport { FormatState } from '../redux/store';\n\nexport class PresetOrCustomStringView extends React.Component<Props> {\n  render() {\n    return (\n      <div>\n        {this.props.label}\n        <ChooseOptionView\n          value={this.props.state.selected}\n          onChange={this.onTypeChange}\n          options={[...this.props.options.keys()]} />\n        {this.props.state.selected === this.props.customOption ?\n          <input type=\"text\"\n            value={this.props.state.custom}\n            onChange={this.onTextChange} /> : null}\n      </div>\n    );\n  }\n\n  onTypeChange = (newOption: string) => {\n    let newState = {\n      ...this.props.state,\n      selected: newOption,\n    };\n    if (newOption === this.props.customOption) {\n      newState.value = this.props.state.custom;\n    } else {\n      let tmp = this.props.options.get(newOption);\n      if (tmp === undefined) {\n        throw new Error(`Option ${newOption} has no value mapped`);\n      }\n      newState.value = tmp;\n    }\n    this.props.onStateChange(newState);\n  }\n\n  onTextChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    let newState = {\n      ...this.props.state,\n      value: event.target.value,\n      custom: event.target.value,\n    };\n    this.props.onStateChange(newState);\n  }\n}\n\nexport interface Props {\n  label?: string,\n  options: Map<string, string>,\n  customOption: string,\n  state: FormatState,\n  onStateChange: (newState: FormatState) => void,\n}\n\nexport default PresetOrCustomStringView;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PresetOrCustomStringView from \"../PresetOrCustomString\";\nimport { FormatState, State as ReduxState } from '../../redux/store';\nimport { setFormat } from '../../redux/actions';\n\n\nconst CUSTOM_FORMAT = \"custom\";\nconst DEFAULT_FORMAT = \"raw\";\nconst FORMAT_MAP = new Map<string, string>();\nFORMAT_MAP.set(DEFAULT_FORMAT, \"%x\");\nFORMAT_MAP.set(\"hexdump\", \"%h\");\nFORMAT_MAP.set(\"URL escaped\", \"%u\");\nFORMAT_MAP.set(\"python\", \"python -c 'print(\\\"%x\\\")'\");\nFORMAT_MAP.set(\"printf\", \"printf '%x'\");\nFORMAT_MAP.set(CUSTOM_FORMAT, \"You should never see this message! %x\")\n\nexport const DEFAULT_FORMAT_STATE: FormatState = {\n  selected: DEFAULT_FORMAT,\n  value: FORMAT_MAP.get(DEFAULT_FORMAT) || \"Default format value not found! %x\",\n  custom: \"yourCommand --flags '%x'\",\n}\n\n\nclass FormatChooser_ extends React.Component<Props> {\n  render() {\n    return <div className=\"format-chooser\">\n      <PresetOrCustomStringView options={FORMAT_MAP}\n        state={this.props.format}\n        customOption={CUSTOM_FORMAT}\n        onStateChange={this.props.setFormat}\n        label=\"Output format: \" />\n    </div>\n  }\n}\n\nexport interface Props {\n  format: FormatState,\n  setFormat: (format: FormatState) => void,\n}\n\nconst mapStateToProps = (state: ReduxState, ownProps: any) => {\n  return {\n    ...ownProps,\n    format: state.persistent.format,\n  };\n};\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    setFormat: (format: FormatState) => dispatch(setFormat(format)),\n  };\n};\n\nconst FormatChooser = connect(mapStateToProps, mapDispatchToProps)(FormatChooser_);\nexport default FormatChooser;\n","import ByteString from './ByteString';\nimport { toHex } from '../Common';\n\n// non url safe\nconst REGEX_PLUS = /\\+/g;\nconst REGEX_SLASH = /\\//g;\nconst REGEX_EQUAL = /=/g;\n//url safe\nconst REGEX_MINUS = /-/g;\nconst REGEX_UNDERSCORE = /_/g;\n\nexport function uriSafeEncode(data: string): string {\n  const base64 = btoa(data);\n  return base64\n    .replace(REGEX_PLUS, '-')\n    .replace(REGEX_SLASH, '_')\n    .replace(REGEX_EQUAL, '');\n}\n\nexport function uriSafeDecode(base64: string): string {\n  base64 = base64\n    .replace(REGEX_MINUS, '+')\n    .replace(REGEX_UNDERSCORE, '/');\n\n  // add padding again\n  let lastBlockSize = base64.length % 4;\n  if (lastBlockSize !== 0) {\n    base64 += ('===').slice(0, 4 - lastBlockSize);\n  }\n  return atob(base64);\n}\n\nexport function escapeBytes(unescaped: ByteString, escapeFunction: (byte: string) => string): ByteString {\n  return new ByteString(unescaped.bytes.map(escapeFunction));\n}\n\nexport function urlEscapeByte(byte: string): string {\n  if (byte.length >= 4) {\n    // \"\\x??\" -> \"%??\"\n    return \"%\" + byte.slice(2);\n  } else {\n    return encodeURIComponent(byte);\n  }\n}\n\nexport function byteToValue(byte: string): number {\n  if (byte.length === 4) {\n    return parseInt(byte.slice(2), 16);\n  } else {\n    return byte.charCodeAt(0);\n  }\n}\n\nexport function toHexdumpChar(byte: string): string {\n  let numVal = byteToValue(byte);\n  if (32 <= numVal && numVal <= 126) {\n    // is printable ASCII char\n    return String.fromCharCode(numVal);\n  } else {\n    return \".\";\n  }\n}\n\nexport function byteToHex(byte: string): string {\n  return toHex(byteToValue(byte), 2);\n}\n\nexport function printfEscapeByte(byte: string): string {\n  if (byte.length === 1) {\n    switch (byte) {\n      // escape quote signs since they could mess up passing the payload to a program (eg printf)\n      case \"'\":\n        return \"\\\\x27\";\n      case \"\\\"\":\n        return \"\\\\x22\";\n      // escape spaces, since the html (used for displaying) does not handle consecutive whitespaces well\n      case \" \":\n        return \"\\\\x20\";\n      // escape backslashes, since they can cause a lot of problems\n      case \"\\\\\":\n        return \"\\\\x5c\";\n    }\n  }\n  return byte;\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { BuilderResult } from '../../hex/ByteStringBuilder';\nimport * as Esc from '../../hex/Escaper';\nimport { State as ReduxState } from '../../redux/store';\nimport ClipboardManager from '../../ClipboardManager';\nimport {centerString, range, toHex} from '../../Common';\n\n\nfunction splitOfBeginning(text: string[], length: number): [string[], string[]] {\n  if (text.length <= length) {\n    return [text, []];\n  } else {\n    return [text.slice(0, length), text.slice(length)];\n  }\n}\n\nclass ColoredHexDumpView_ extends React.Component<Props> {\n  render() {\n    // ClipboardManager.setTextToCopy(null);//TODO bug: Delayed by one\n    // Possible Solution: fire noop event when copy button hiding state changes\n\n    let bytesPerRow = this.props.bytesPerRow ?? 0x10;\n    let showOffset = this.props.showOffset ?? true;\n    let showAscii = this.props.showAscii ?? true;\n    let colorCount = 3;\n\n    //TODO move upstream\n    if (this.props.builderResult.errorMessage) {\n      return this.renderErrorMessage(this.props.builderResult.errorMessage);\n    }\n\n    let rows: Row[] = [];\n    let missingInRow = 0;\n\n    // split the bytes into rows\n    for (let i = 0; i < this.props.builderResult.byteStrings.length; i++) {\n      let bytes = this.props.builderResult.byteStrings[i].data.bytes;\n\n      while (bytes.length > 0) {\n        if (missingInRow <= 0) {\n          rows.push({ items: [] });\n          missingInRow = bytesPerRow;\n        }\n        let toAdd;\n        [toAdd, bytes] = splitOfBeginning(bytes, missingInRow);\n        rows[rows.length - 1].items.push({ bytes: toAdd, color: i % colorCount });\n        missingInRow -= toAdd.length;\n      }\n    }\n\n    function renderRow(offset: any, hex: any, ascii: any, extraClass: string = \"\"): any {\n      return <div className={`row${extraClass}`} key={`row-${offset}`}>\n        {showOffset ? <div className=\"cell offset\"><span>{offset}</span></div> : undefined}\n        <div className=\"cell hex\">{hex}</div>\n        {showAscii ? <div className=\"cell ascii\">{ascii}</div> : undefined}\n      </div>\n    }\n\n    let createRow = function(row: Row, index: number): any {\n      let offset = toHex(index * bytesPerRow, 4);\n      let hex = [];\n      let ascii = [];\n      for (let i = 0; i < row.items.length; i++) {\n        let item = row.items[i];\n        let colorClass = `color-${item.color + 1}`;\n        let hexString = item.bytes.map(Esc.byteToHex).join(\" \");\n        if (i !== row.items.length - 1) {\n          hexString += \" \";\n        }\n        let asciiString = item.bytes.map(Esc.toHexdumpChar).join(\"\");\n        asciiString = asciiString.replace(/ /g, \"\\u00a0\");//html safe spaces\n        let key = `hd-${index}-${i}`;\n        hex.push(<span key={key} className={colorClass}>{hexString}</span>);\n        ascii.push(<span key={key} className={colorClass}>{asciiString}</span>)\n      }\n      return renderRow(offset, hex, ascii);\n    }\n\n    let headerRow;\n    if (showOffset) {\n      let offsets = range(0, bytesPerRow).map(i => toHex(i, 2)).join(\" \");\n      headerRow = renderRow(\"\",\n        <span>{offsets}</span>,\n        <span>{centerString(\" ASCII \", bytesPerRow, \"=\")}</span>,\n        \" header-row\");\n    }\n\n    return <div className=\"hexdump\">\n      {headerRow}\n      {rows.map(createRow)}\n    </div>;\n  }\n\n  renderErrorMessage(text: string) {\n    ClipboardManager.setTextToCopy(null);\n    return <span className=\"err-msg\">\n      {text}\n    </span>\n  }\n}\n\n\n\ninterface Row {\n  items: RowItem[],\n}\n\ninterface RowItem {\n  color: number,\n  bytes: string[],\n}\n\nexport interface Props {\n  builderResult: BuilderResult,\n  bytesPerRow?: number,\n  showOffset?: boolean,\n  showAscii?: boolean,\n}\n\n\nconst mapStateToProps = (state: ReduxState, ownProps: any): Props => {\n  return {\n    ...ownProps,\n    isLittleEndian: state.persistent.isLittleEndian,\n    builderResult: state.outputBuilderResult,\n    formatString: state.persistent.format.value,\n  };\n};\n\nconst ColoredHexDumpView = connect(mapStateToProps)(ColoredHexDumpView_);\nexport default ColoredHexDumpView;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { TaggedByteString, BuilderResult } from '../../hex/ByteStringBuilder';\nimport * as Esc from '../../hex/Escaper';\nimport { State as ReduxState } from '../../redux/store';\nimport ClipboardManager from '../../ClipboardManager';\nimport ColoredHexDumpView from './HexDumpView';\n\nconst INSERT_HERE_REGEX = /%[xuh]/g;\nconst ERROR_MESSAGE = 'Format has to contain exactly one \"%x\" (\\\\x?? escape), \"%u\" (%?? escape) or \"%h\" (hexdump view)'\n\n\nclass ColoredHexStringView_ extends React.Component<Props> {\n  render() {\n    const labels = this.props.formatString.split(INSERT_HERE_REGEX);\n    if (labels.length !== 2) {\n      return this.renderErrorMessage(ERROR_MESSAGE);\n    }\n    const format = this.props.formatString.slice(labels[0].length, labels[0].length + 2);\n    if (format === \"%h\") {\n      return <ColoredHexDumpView />\n    }\n\n    const isPercentXEscape = format === \"%x\";\n    const escapeFunction = isPercentXEscape ? Esc.printfEscapeByte : Esc.urlEscapeByte;\n\n    if (this.props.builderResult.errorMessage) {\n      return this.renderErrorMessage(this.props.builderResult.errorMessage);\n    }\n\n    let escapedTaggedStrings: TaggedString[] = this.props.builderResult.byteStrings.map((bs: TaggedByteString) => {\n      return {\n        key: bs.key,\n        str: Esc.escapeBytes(bs.data, escapeFunction).toString(),\n      };\n    });\n\n    let textToCopy = escapedTaggedStrings.map((tbs) => { return tbs.str }).join(\"\");\n    textToCopy = labels[0] + textToCopy + labels[1];\n    ClipboardManager.setTextToCopy(textToCopy);\n\n    return <div className=\"colored-bytes\">\n      {labels[0]}\n      {escapedTaggedStrings.map((value: TaggedString) => {\n        return <span className=\"multi-colored\" key={value.key}>\n          {value.str}\n        </span>;\n      })}\n      {labels[1]}\n    </div>;\n  }\n\n  renderErrorMessage(text: string) {\n    ClipboardManager.setTextToCopy(null);\n    return <span className=\"err-msg\">\n      {text}\n    </span>\n  }\n}\n\nexport interface Props {\n  builderResult: BuilderResult,\n  formatString: string,\n}\n\ninterface TaggedString {\n  str: string,\n  key: number,\n}\n\nconst mapStateToProps = (state: ReduxState, ownProps: any): Props => {\n  return {\n    ...ownProps,\n    isLittleEndian: state.persistent.isLittleEndian,\n    builderResult: state.outputBuilderResult,\n    formatString: state.persistent.format.value,\n  };\n};\n\nconst ColoredHexStringView = connect(mapStateToProps)(ColoredHexStringView_);\nexport default ColoredHexStringView;\n","import React from 'react';\nimport Checkbox from 'rc-checkbox';\nimport { connect } from 'react-redux';\nimport { ListEntry, State as ReduxState } from '../../redux/store';\nimport { toggleEndian } from '../../redux/actions';\n\n\nclass EndianToggleView_ extends React.Component<Props> {\n  render() {\n    if (!this.isVisible()) {\n      return null;\n    }\n\n    return (\n      <div className=\"endian-toggle\">\n        <label>\n          <Checkbox\n            className=\"cell\"\n            checked={this.props.isLittleEndian}\n            onChange={this.props.toggleEndian}\n          />\n          {\"use little endian\"}\n        </label>\n      </div>\n    );\n  }\n\n  isVisible(): boolean {\n    for (let i = 0; i < this.props.blueprints.length; i++) {\n      if (this.props.blueprints[i].data.type === \"Integer\") {\n        // Only show if at least one element is of type Integer\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\nexport interface Props {\n  blueprints: ListEntry[],\n  isLittleEndian: boolean,\n  toggleEndian: () => void,\n}\n\nconst mapStateToProps = (state: ReduxState, ownProps: any) => {\n  return {\n    ...ownProps,\n    isLittleEndian: state.persistent.isLittleEndian,\n    blueprints: state.persistent.entries.list,\n  };\n};\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    toggleEndian: () => dispatch(toggleEndian()),\n  };\n};\n\nconst EndianToggleView = connect(mapStateToProps, mapDispatchToProps)(EndianToggleView_);\nexport default EndianToggleView;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport CopyButton from '../CopyButton';\nimport FormatChooser from \"./FormatChooser\";\nimport { State as ReduxState } from '../../redux/store';\nimport ColoredHexStringView from './ColoredHexStringView';\nimport EndianToggle from './EndianToggleView';\n\nclass OutputView_ extends React.Component<Props> {\n  render() {\n    return (\n      <div className=\"byte-output\">\n        <div className=\"output-settings\">\n          <div className=\"wrapper\">\n            <FormatChooser />\n            <EndianToggle />\n            <CopyButton />\n          </div>\n        </div>\n        <ColoredHexStringView />\n      </div>\n    );\n  }\n}\n\nexport interface Props {\n}\n\nconst mapStateToProps = (state: ReduxState, ownProps: any) => {\n  return {\n    ...ownProps,\n  };\n};\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n  };\n};\n\nconst OutputView = connect(mapStateToProps, mapDispatchToProps)(OutputView_);\nexport default OutputView;\n","import * as Actions from './actions';\nimport { ListState, State, fallbackState } from './store';\nimport { Utils as StringUtils } from '../hex/String';\nimport { buildOutput } from '../hex/ByteStringBuilder';\n\n\nexport function reducer(state: State | undefined, action: Actions.Action): State {\n  if (!state) {\n    console.warn(\"No state was supplied to reducer. Falling back to default values\");\n    state = fallbackState;\n  }\n\n  state = {\n    ...state,\n    updateCounter: state.updateCounter + 1,\n  };\n\n  switch (action.type) {\n    case Actions.FORMAT_CHANGED: {\n      let payload = (action as Actions.FormatChangeAction).payload;\n      return {\n        ...state,\n        persistent: {\n          ...state.persistent,\n          format: payload,\n        },\n      };\n    }\n    case Actions.ENDIAN_TOGGLE: {\n      return buildOutput({\n        ...state,\n        persistent: {\n          ...state.persistent,\n          isLittleEndian: !state.persistent.isLittleEndian,\n        },\n      });\n    }\n    case Actions.LIST_ADD:\n    case Actions.LIST_SWAP:\n    case Actions.LIST_ITEM_UPDATE:\n    case Actions.LIST_DELETE:\n    case Actions.LIST_DELETE_ALL: {\n      let copy: ListState = {\n        list: [...state.persistent.entries.list],\n        nextId: state.persistent.entries.nextId,\n      }\n      copy = updateList(copy, action);\n\n      return buildOutput({\n        ...state,\n        persistent: {\n          ...state.persistent,\n          entries: copy,\n        },\n      });\n    }\n\n    case Actions.SET_STATE: {\n      let payload: State = (action as Actions.SetStateAction).payload;\n      return buildOutput({\n        ...payload,\n        updateCounter: state.updateCounter,\n      });\n    }\n  }\n  return state;\n}\n\nfunction updateList(copy: ListState, action: Actions.Action): ListState {\n  // For nicer code this function is allowed to modify \"copy\"\n  switch (action.type) {\n    case Actions.LIST_ADD: {\n      let newEntry = StringUtils.defaultValues();\n      newEntry.pattern = \"A\".repeat(copy.list.length + 1);\n      copy.list.push({\n        key: copy.nextId,\n        data: newEntry\n      });\n      copy.nextId += 1;\n      return copy;\n    }\n    case Actions.LIST_SWAP: {\n      let payload = (action as Actions.ListSwapAction).payload;\n      let tmp = copy.list[payload.indexA];\n      copy.list[payload.indexA] = copy.list[payload.indexB];\n      copy.list[payload.indexB] = tmp;\n      return copy;\n    }\n    case Actions.LIST_ITEM_UPDATE: {\n      let payload = (action as Actions.ListItemChangeAction).payload;\n      copy.list[payload.index] = {\n        key: copy.list[payload.index].key,\n        data: payload.newValue,\n      }\n      return copy;\n    }\n    case Actions.LIST_DELETE: {\n      let index = (action as Actions.ListDeleteAction).payload;\n      copy.list.splice(index, 1);\n      return copy;\n    }\n    case Actions.LIST_DELETE_ALL: {\n      return {\n        list: [],\n        nextId: 0,\n      };\n    }\n  }\n  throw new Error(\"Case not handled!\")\n}\n\nexport default reducer\n","import { createStore } from 'redux';\nimport { reducer } from './reducer';\nimport { AnyValues, BuilderResult } from '../hex/ByteStringBuilder';\nimport { DEFAULT_FORMAT_STATE } from '../views/hex/FormatChooser';\n\nexport interface State {\n  persistent: PersistentState,\n  updateCounter: number,\n  outputBuilderResult: BuilderResult,\n}\n\nexport interface PersistentState {\n  isLittleEndian: boolean,\n  format: FormatState,\n  entries: ListState,\n}\n\nexport interface ListState {\n  list: ListEntry[],\n  nextId: number,\n}\n\nexport interface ListEntry {\n  key: number,\n  data: AnyValues,\n}\n\nexport interface FormatState {\n  selected: string,\n  value: string,\n  custom: string,\n}\n\nexport const fallbackState: State = {\n  persistent: {\n    isLittleEndian: true,\n    format: DEFAULT_FORMAT_STATE,\n    entries: {\n      list: [],\n      nextId: 0,\n    },\n  },\n  updateCounter: 0,\n  outputBuilderResult: {\n    byteStrings: [],\n  },\n}\n\nlet devTools = undefined;\nif ((window as any).__REDUX_DEVTOOLS_EXTENSION__) {\n  // Redux dev tools are available\n  let devToolOptions = {\n    trace: false,\n    traceLimit: 25\n  };\n  devTools = (window as any).__REDUX_DEVTOOLS_EXTENSION__(devToolOptions);\n}\n\nexport const store = createStore(reducer, fallbackState, devTools);\n","import { State, PersistentState, fallbackState } from './store';\nimport { uriSafeDecode, uriSafeEncode } from '../hex/Escaper';\nimport { AnyValues } from '../hex/ByteStringBuilder';\nimport { store } from './store';\nimport { setState } from './actions';\n\ninterface MinimizedState {\n  le: boolean,\n  f: {\n    s: string,\n    v: string,\n    c: string,\n  },\n  l: AnyValues[],//TODO compress this\n}\n\nfunction minimizeState(s: PersistentState): MinimizedState {\n  return {\n    le: s.isLittleEndian,\n    f: {\n      s: s.format.selected,\n      v: s.format.value,\n      c: s.format.custom,\n    },\n    l: s.entries.list.map((x: any) => x.data),\n  }\n}\n\nfunction unminimizeState(min: MinimizedState): State {\n  let list = min.l.map(\n    (data: AnyValues, index: number) => { return { key: index, data: data } }\n  );\n  return {\n    ...fallbackState,\n    persistent: {\n      isLittleEndian: min.le,\n      format: {\n        selected: min.f.s,\n        value: min.f.v,\n        custom: min.f.c,\n      },\n      entries: {\n        list: list,\n        nextId: list.length,\n      }\n    }\n  }\n}\n\n\nexport function exportToUri(): string {\n  let stateString = serialize(store.getState().persistent);\n\n  // take the current url and set the import param to our current state\n  const urlBuilder = new URL(window.location.href);\n  urlBuilder.searchParams.set(\"import\", stateString);\n  return urlBuilder.href;\n}\n\n\nexport function tryImportFromUri(): boolean {\n  const url = new URL(window.location.href);\n  const data = url.searchParams.get(\"import\");\n  if (!data){\n    console.log(\"URI does not contain data to import\");\n    return false;\n  }\n  return tryImportFromString(data);\n}\n\nexport function tryImportFromString(data: string): boolean {\n  try {\n    const state = deserialize(data);\n    store.dispatch(setState(state));\n    return true;\n  } catch (e) {\n    console.error(\"Loading state failed:\", e);\n    return false;\n  }\n}\n\n\nexport function serialize(state: PersistentState): string {\n  let min = minimizeState(state);\n  console.log(\"exported state\", min);\n  return uriSafeEncode(JSON.stringify(min));\n}\n\nexport function deserialize(data: string): State {\n  try {\n    let jsonText = tryOrMessage(() => uriSafeDecode(data), `Decoding base64 failed\\nBase64 text: '${data}'`);\n    let deserialized = tryOrMessage(() => JSON.parse(jsonText), `Decoding JSON failed!\\nJSON: ${jsonText}`);\n    let min = deserialized as MinimizedState;\n    if (!min){\n      throw new Error(\"Missing keys in decoded JSON\");\n    }\n    //TODO check if it matches the type\n    return unminimizeState(min);\n  } catch (error) {\n    throw new Error(`deserialize failed: ${error}`)\n  }\n}\n\nfunction tryOrMessage(fn: () => any, message: string): any {\n  try {\n    return fn();\n  } catch (error) {\n    throw new Error(`${message}\\n\\nCaused by '${error}'`);\n  }\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { State as ReduxState } from '../../redux/store';\nimport { exportToUri } from '../../redux/persistence';\n\nclass ExportUriView_ extends React.Component<Props> {\n  render() {\n    const url = exportToUri();\n\n    return <span>\n      You can return to the current state (or share it with someone) by visiting:\n      <br /><br />\n      {url}\n      <br /><br />\n      <b>{\"[Warning] This software is still under development, so I might change/break the format sometimes.\"}</b>\n    </span>;\n  }\n}\n\n\nexport interface Props {\n  state: any,\n  // updatedClipbordManager: () => void,\n}\n\nconst mapStateToProps = (state: ReduxState, ownProps: any) => {\n  return {\n    ...ownProps,\n    state: state.persistent,\n  };\n};\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    // updatedClipbordManager: () => dispatch(updatedClipbordManager()),\n  };\n};\n\nconst ExportUriView = connect(mapStateToProps, mapDispatchToProps)(ExportUriView_);\nexport default ExportUriView;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport './css/App.scss';\nimport InputTable from './app/views/hex/InputTable';\nimport OutputView from './app/views/hex/OutputView';\nimport ExportUriView from './app/views/hex/ExportUriView';\nimport { State } from './app/redux/store';\n\n\n// TODO: next steps\n//  - improve output line breaks (and use monospaced font)\n//      - add hexdump output\n//  - a menu to quickly jump to any section? like <a href=\"#export-link\">Export link</a>\n// try like https://muzzybear.github.io/react-hexviewer/\n//  - explain that export is a snapshot, reword \"session\"\n//  - (opt) compress the json before base64\n//  - Fix names\n\nclass App_ extends React.Component<any> {\n  render() {\n    return (\n      <div className=\"app-root\">\n        <div id=\"input\">\n          <InputTable />\n        </div>\n        <div id=\"output\">\n          <OutputView />\n        </div>\n        <div id=\"export-link\" className=\"export-link\">\n          <ExportUriView />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: State, ownProps: any) => {\n  return {\n    ...ownProps,\n  };\n};\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n  };\n};\n\nexport const App = connect(mapStateToProps, mapDispatchToProps)(App_);\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {store} from './app/redux/store';\nimport {tryImportFromUri, tryImportFromString} from './app/redux/persistence';\n\nfunction importData(){\n  if (!tryImportFromUri()) {\n    console.info(\"Falling back on default values\");\n    const defaultValues = \"eyJsZSI6dHJ1ZSwiZiI6eyJzIjoiaGV4ZHVtcCIsInYiOiIlaCIsImMiOiJ5b3VyQ29tbWFuZCAtLWZsYWdzICcleCcifSwibCI6W3sicGF0dGVybiI6Ij09PSBRdWljayBzdGFydCBpbnN0cnVjdGlvbnMgPT09IiwicmVwZWF0Q291bnQiOjEsInR5cGUiOiJTdHJpbmcifSx7InBhdHRlcm4iOiIgLSBJbnB1dCBub24gYXNjaWkgY2hhcnMgbGlrZSB0aGlzOiBcXHg_PyB3aGVyZSA_PyBpcyB0aGUgaGV4IGNvZGUgb2YgdGhlIGNoYXIiLCJyZXBlYXRDb3VudCI6MSwidHlwZSI6IlN0cmluZyJ9LHsicGF0dGVybiI6IiAgIEFsbCBvdGhlciBiYWNrc2xhc2hlcyBhcmUgZXNjYXBlZC4gU28gdXNlICdcXHgwYScgaW5zdGVhZCBvZiAnXFxuJyEiLCJyZXBlYXRDb3VudCI6MSwidHlwZSI6IlN0cmluZyJ9LHsicGF0dGVybiI6IiAtIFlvdSBjYW4gYWRkIHBhZGRpbmcgbGlrZSBiZWxvdzoiLCJyZXBlYXRDb3VudCI6MSwidHlwZSI6IlN0cmluZyJ9LHsicGF0dGVybiI6IlxceDkwIiwicGFkZFRvTGVuZ3RoIjoiMHgxMDAiLCJ0eXBlIjoiUGFkZGluZyJ9LHsicGF0dGVybiI6IiAtIFlvdSBjYW4gcHV0IGFuIGFkZHJlc3MgaW50byBtZW1vcnkgbGlrZSBiZWxvdzoiLCJyZXBlYXRDb3VudCI6MSwidHlwZSI6IlN0cmluZyJ9LHsibnVtYmVyU3RyaW5nIjoiMHgxMjM0NTY3OCIsIm51bWJlclR5cGUiOiIzMiBiaXQiLCJ0eXBlIjoiSW50ZWdlciJ9LHsicGF0dGVybiI6IiAtIFlvdSBjYW4gc2VlIHRoZSBvdXRwdXQgaW4gdGhlIGJveCBiZWxvdyIsInJlcGVhdENvdW50IjoxLCJ0eXBlIjoiU3RyaW5nIn0seyJwYXR0ZXJuIjoiICAgVGhlcmUgYXJlIG11bHRpcGxlIHN1cHBvcnRlZCBvdXRwdXQgZm9ybWF0cyIsInJlcGVhdENvdW50IjoxLCJ0eXBlIjoiU3RyaW5nIn1dfQ\";\n    if (!tryImportFromString(defaultValues)) {\n      alert(\"[Bug/Compat breaking change] Parsing hardcoded initial state failed\");\n    }\n  }\n}\n\nimportData();\n\nReactDOM.render(\n  <React.StrictMode>\n     <Provider store={store}>\n        <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}