{"version":3,"sources":["app/views/ChooseOptionView.tsx","app/Common.ts","app/views/hex/PaddingEditView.tsx","app/hex/ByteString.ts","app/hex/Padding.ts","app/hex/String.ts","app/hex/ByteStringBuilder.ts","app/hex/Integer.ts","app/views/hex/IntegerEditView.tsx","app/views/hex/StringEditView.tsx","app/views/ItemControls.tsx","app/views/hex/HexElementView.tsx","app/views/hex/InputTable.tsx","app/redux/actions.ts","app/ClipboardManager.ts","app/views/CopyButton.tsx","app/views/PresetOrCustomString.tsx","app/views/hex/FormatChooser.tsx","app/hex/Escaper.ts","app/views/hex/ColoredHexStringView.tsx","app/views/hex/EndianToggleView.tsx","app/views/hex/OutputView.tsx","app/redux/reducer.ts","app/redux/store.ts","app/redux/persistence.ts","app/views/hex/ExportUriView.tsx","App.tsx","serviceWorker.js","index.js"],"names":["ChooseOptionView","onChange","event","props","target","value","this","key","disabled","hidden","prompt","options","map","i","React","Component","isValidRepeatCountWhileEditing","repeatCountString","repeatCount","Number","isNaN","LABELS","PaddingEditView","onNumberChange","Common","paddToLength","onPatternChange","pattern","className","type","values","changedValues","Object","assign","hexEscapeRegex","ByteString","bytes","join","other","push","copy","reverse","n","repeated","length","str","slice","match","hex","Error","len","result","Array","Utils","padding","previousByteStrings","offset","missing","throwBadInputError","patternBytes","fromString","Math","floor","incompleteSize","incompletePadding","ReversedUtils","reversed","ERROR_BYTE_STRING","data","message","e","name","ByteStringBuilder","littleEndian","blueprintList","processed","previous","toBytes","entry","byteStrings","errorMessage","blueprint","Padding","paddingToBytes","Int","integerToBytes","Str","stringToBytes","TYPE","MAX_INT_MAP","Map","set","BYTE_COUNT_MAP","numberString","numberType","integer","num","parseNumber","maxOrNull","get","max","BigInt","string","replace","error","getErrorMessage","byteCount","toString","missingChars","repeat","fromHex","INT_SIZES","LABLES","IntegerEditView","onTypeChange","newValue","onValueChange","test","LABELS_NORMAL","LABELS_REVERSED","StringEditView","labels","ItemControls","onMoveUp","index","onItemsSwap","onMoveDown","isLast","onDelete","onItemDelete","upClassName","undefined","downClassName","onClick","aria-hidden","TYPE_MAP","defaultValues","viewClass","Integer","String","Pad","TYPES","keys","getTypeInfo","ret","HexElementView","newType","onChildChange","newValues","renderChild","newData","createElement","InputTable_","entries","elem","deleteListItem","swapListItems","updateItem","colSpan","addListItem","deleteAllListItems","InputTable","connect","state","ownProps","persistent","list","dispatch","indexA","indexB","payload","listItemSwap","listItemDelete","listItemChanged","instance","text","CopyButton_","ClipbordManager","canCopy","copyCurrent","setState","updateCounterWhenCopied","updateCounter","buttonText","CopyButton","PresetOrCustomStringView","newOption","newState","selected","customOption","custom","tmp","onStateChange","onTextChange","label","FORMAT_MAP","DEFAULT_FORMAT_STATE","FormatChooser_","PresetOrCustomString","format","setFormat","FormatChooser","REGEX_PLUS","REGEX_SLASH","REGEX_EQUAL","REGEX_MINUS","REGEX_UNDERSCORE","escapeBytes","unescaped","escapeFunction","urlEscapeByte","byte","encodeURIComponent","printfEscapeByte","INSERT_HERE_REGEX","ColoredHexStringView_","formatString","split","renderErrorMessage","indexOf","Esc","isLittleEndian","getBytesStrings","blueprints","escapedTaggedStrings","bs","textToCopy","tbs","ClipboardManager","setTextToCopy","ColoredHexStringView","EndianToggleView_","isVisible","checked","toggleEndian","EndianToggleView","OutputView_","OutputView","reducer","action","console","warn","fallbackState","listCopy","newEntry","StringUtils","nextId","splice","devTools","window","__REDUX_DEVTOOLS_EXTENSION__","trace","traceLimit","store","createStore","exportToUri","stateString","min","s","le","f","v","c","l","x","log","btoa","uriSafeEncode","JSON","stringify","serialize","getState","urlBuilder","URL","location","href","searchParams","tryImportFromString","jsonText","tryOrMessage","base64","lastBlockSize","atob","uriSafeDecode","parse","unminimizeState","deserialize","fn","ExportUriView_","url","ExportUriView","App_","id","App","Boolean","hostname","tryImportFromUri","info","alert","importData","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.1945e846.chunk.js","sourcesContent":["import React from 'react';\n\nexport class ChooseOptionView extends React.Component<ChooseOptionViewProps, {}> {\n  static defaultValue(): string {\n    return \"\";\n  }\n\n  render() {\n    return (<select onChange={(event) => { this.props.onChange(event.target.value) }} value={this.props.value}>\n      <option value=\"\" key={-1} disabled hidden>\n        {this.props.prompt ? this.props.prompt : \"Choose a option\"}\n      </option>\n      {this.props.options.map((value: string, i: number) => {\n        // Here using key=index should be ok, since the order should not change\n        return <option value={value} key={i}>{value}</option>;\n      })}\n    </select>);\n  }\n}\n\nexport interface ChooseOptionViewProps {\n  prompt?: string,\n  value: string,\n  options: string[],\n  onChange: (newValue: string) => void,\n}\n\nexport default ChooseOptionView;\n","// Do not allow arbitrary large values for repeatCount, paddToLength, etc to\n// prevent you from accidentially DoS'ing yourself. Happened to me ;D\nexport const MAX_REPEAT_INT = 100000 - 1;\nexport const OUTPUT_COLORS = [\"red\", \"green\", \"blue\"];\n\nexport function isValidRepeatCountWhileEditing(repeatCountString: string): boolean {\n  if (repeatCountString === \"\") {\n    // allow the empty string while editing\n    return true;\n  } else {\n    const repeatCount = Number(repeatCountString);\n    return (!isNaN(repeatCount)) && (repeatCount > 0) && (repeatCount <= MAX_REPEAT_INT);\n  }\n}\n\nexport function clamp(minInclusive: number, value: number, maxInclusive: number) {\n  return Math.max(minInclusive, Math.min(value, maxInclusive));\n};\n","import React from 'react';\nimport * as Padding from '../../hex/Padding';\nimport * as Common from '../../Common';\n\nconst LABELS = [\"Repeat \", \" up to index \"];\n\nexport default class PaddingEditView extends React.Component<Props> {\n  render() {\n    return (\n      <div className=\"edit-container\">\n        {LABELS[0]}\n        <input className=\"input-string\" type=\"text\"\n          value={this.props.values.pattern}\n          onChange={this.onPatternChange} />\n        {LABELS[1]}\n        <input className=\"input-count\" type=\"text\"\n          value={this.props.values.paddToLength}\n          onChange={this.onNumberChange} />\n      </div>);\n  }\n\n  onNumberChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (Common.isValidRepeatCountWhileEditing(event.target.value)) {\n      this.onChange({ paddToLength: event.target.value });\n    }\n  }\n\n  onPatternChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.onChange({ pattern: event.target.value });\n  }\n\n  onChange(changedValues: any) {\n    this.props.onChange(Object.assign({}, this.props.values, changedValues));\n  }\n}\n\nexport interface Props {\n  values: Padding.Values,\n  onChange: (newValues: Padding.Values) => void,\n}\n","const hexEscapeRegex = /\\x[0-9a-fA-F]{2}/\n\nexport default class ByteString {\n  bytes: string[];\n\n  constructor(bytes: string[]) {\n    this.bytes = bytes;\n  }\n\n  get length(): number {\n    return this.bytes.length;\n  }\n\n  toString(): string {\n    return this.bytes.join(\"\");\n  }\n\n  append(other: ByteString) {\n    this.bytes.push(...other.bytes);\n  }\n\n  reversed(): ByteString {\n    let copy = [...this.bytes];\n    copy.reverse();\n    return new ByteString(copy);\n  }\n\n  repeated(n: number): ByteString {\n    let repeated = [];\n    for (let i = 0; i < n; i++) {\n      repeated.push(...this.bytes);\n    }\n    return new ByteString(repeated);\n  }\n\n  static fromString(str: string): ByteString {\n    let bytes: string[] = [];\n    let i = 0;\n    while (i < str.length) {\n      let slice = str.slice(i, i + 4);\n      if (slice.match(hexEscapeRegex)) {\n        // add \"\\x??\" as one byte\n        bytes.push(slice);\n        i += 4;\n      } else {\n        bytes.push(str[i]);\n        i += 1;\n      }\n    }\n    return new ByteString(bytes);\n  }\n\n  static fromHex(hex: string): ByteString {\n    if (hex.length % 2 === 1) {\n      throw new Error(\"Hex has odd length\");\n    }\n    const len = hex.length / 2;\n    let result = Array(len);\n    for (var i = 0; i < len; i++) {\n      result[i] = \"\\\\x\" + hex.slice(2 * i, 2 * i + 2);\n    }\n    return new ByteString(result);\n  }\n}\n","import ByteString from \"./ByteString\";\nimport {throwBadInputError} from \"./ByteStringBuilder\";\n\nexport interface Values {\n  paddToLength: number,\n  pattern: string,\n  type: string,\n}\n\nexport const TYPE = \"Padding\";\n\n\nexport class Utils {\n  static defaultValues(): Values {\n    return {\n      pattern: \"A\",\n      paddToLength: 1,\n      type: TYPE,\n    };\n  }\n\n  static paddingToBytes(padding: Values, previousByteStrings: ByteString[]): ByteString {\n    var offset = 0;\n    for (var i = 0; i < previousByteStrings.length; i++) {\n      offset += previousByteStrings[i].bytes.length;\n    }\n    var missing = padding.paddToLength - offset;\n    if (missing < 0) {\n      throwBadInputError(`Padding should be applied up to index ${padding.paddToLength}, but the string is already longer than that (length=${offset})`);\n    }\n    if (!padding.pattern) {\n      throwBadInputError(\"Padding can not be empty\");\n    }\n\n    const patternBytes = ByteString.fromString(padding.pattern);\n    const repeatCount = Math.floor(missing / patternBytes.length);\n    const incompleteSize = missing - (repeatCount * patternBytes.length)\n\n    const incompletePadding: string[] = patternBytes.bytes.slice(0, incompleteSize);\n    let repeated = patternBytes.repeated(repeatCount);\n    repeated.bytes.push(...incompletePadding);\n    return repeated;\n  }\n}\n\nexport default Values;\n","import ByteString from \"./ByteString\";\n\nexport interface Values {\n  repeatCount: number,\n  pattern: string,\n  type: string,\n}\n\nexport const TYPE = \"String\";\nexport const TYPE_REVERSED = \"String (reversed)\";\n\n\nexport class Utils {\n  static defaultValues(): Values {\n    return {\n      pattern: \"A\",\n      repeatCount: 1,\n      type: TYPE,\n    };\n  }\n\n  static stringToBytes(values: Values): ByteString {\n    let bytes = ByteString.fromString(values.pattern);\n    return bytes.repeated(values.repeatCount);\n  }\n}\n\nexport class ReversedUtils {\n  static defaultValues(): Values {\n    return {\n      pattern: \"A\",\n      repeatCount: 1,\n      type: TYPE_REVERSED,\n    };\n  }\n\n  static stringToBytes(values: Values): ByteString {\n    let bytes = ByteString.fromString(values.pattern);\n    return bytes.reversed().repeated(values.repeatCount);\n  }\n}\n\nexport default Values;\n","import { ListEntry } from '../redux/store';\nimport * as Padding from './Padding';\nimport * as Int from './Integer';\nimport * as Str from './String';\nimport ByteString from './ByteString';\n\nconst BAD_INPUT_ERROR_NAME = \"BadInputError\";\nconst ERROR_BYTE_STRING: TaggedByteString = {\n  key: -1,\n  data: ByteString.fromString(\"Error: Please check your inputs. @dev: This message should not be shown\"),\n}\n\nexport function throwBadInputError(message: string) {\n  // This function creates an error that signals, that it was caused by bad user input\n  let e = new Error(message || \"Something went wrong. Please check your inputs\")\n  e.name = BAD_INPUT_ERROR_NAME;\n  throw e;\n}\n\nexport class ByteStringBuilder {\n  littleEndian: boolean;\n\n  constructor(littleEndian: boolean = true) {\n    this.littleEndian = littleEndian;\n  }\n\n  getBytesStrings(blueprintList: ListEntry[]): BuilderResult {\n    let i: number = 0;\n    try {\n      let processed: TaggedByteString[] = [];\n      let previous: ByteString[] = [];\n      for (i = 0; i < blueprintList.length; i++) {\n        let bytes: ByteString = this.toBytes(blueprintList[i].data, previous);\n        let entry = { key: blueprintList[i].key, data: bytes };\n        previous.push(bytes);\n        processed.push(entry);\n      }\n      return { byteStrings: processed };\n    } catch (e) {\n      if (e.name === BAD_INPUT_ERROR_NAME) {\n        return { errorMessage: `Error in input ${i + 1}: ${e.message}`, byteStrings: [ERROR_BYTE_STRING] };\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  toBytes(blueprint: AnyValues, previousByteStrings: ByteString[]): ByteString {\n    switch (blueprint.type) {\n      case Padding.TYPE:\n        return Padding.Utils.paddingToBytes(blueprint as Padding.Values, previousByteStrings);\n      case Int.TYPE:\n        return Int.Utils.integerToBytes(blueprint as Int.Values, this.littleEndian);\n      case Str.TYPE:\n        return Str.Utils.stringToBytes(blueprint as Str.Values);\n      case Str.TYPE_REVERSED:\n        return Str.ReversedUtils.stringToBytes(blueprint as Str.Values);\n      default:\n        throw new Error(\"Unknown type\");\n    }\n  }\n\n  isValid(blueprint: AnyValues): boolean {\n    try {\n      this.toBytes(blueprint, []);//will throw error if is not valid\n      return true;\n    } catch {\n      return false;\n    }\n  }\n};\n\n//TODO move\nexport type AnyValues = Padding.Values | Int.Values | Str.Values;\n\n\nexport interface BuilderResult {\n  byteStrings: TaggedByteString[],\n  errorMessage?: string,\n}\n\nexport interface TaggedByteString {\n  key: number,\n  data: ByteString,\n}\n\nexport default ByteStringBuilder;\n","import ByteString from \"./ByteString\";\nimport {throwBadInputError} from \"./ByteStringBuilder\";\n\nexport const INT_8 = \"8 bit\";\nexport const INT_16 = \"16 bit\";\nexport const INT_32 = \"32 bit\";\nexport const INT_64 = \"64 bit\";\nexport const TYPE = \"Integer\";\n\nconst MAX_INT_MAP = new Map<string, bigint>();\nMAX_INT_MAP.set(INT_8, 0xffn);\nMAX_INT_MAP.set(INT_16, 0xffffn);\nMAX_INT_MAP.set(INT_32, 0xffffffffn);\nMAX_INT_MAP.set(INT_64, 0xffffffffffffffffn);\n\nconst BYTE_COUNT_MAP = new Map<string, number>();\nBYTE_COUNT_MAP.set(INT_8, 1);\nBYTE_COUNT_MAP.set(INT_16, 2);\nBYTE_COUNT_MAP.set(INT_32, 4);\nBYTE_COUNT_MAP.set(INT_64, 8);\n\nexport interface Values {\n  numberString: string,\n  numberType: string,\n  type: string,\n}\n\nexport class Utils {\n  static defaultValues(): Values {\n    return {\n      numberString: \"0x41414141\",\n      numberType: INT_32,\n      type: TYPE,\n    };\n  }\n\n  static getErrorMessage(integer: Values) {\n    try {\n      var num: bigint = Utils.parseNumber(integer.numberString);\n      const type: string = integer.numberType;\n      let maxOrNull = MAX_INT_MAP.get(type);\n      if (!maxOrNull) {\n        throw new Error(`Unknown number type: ${type}`);\n      } else {\n        let max: bigint = maxOrNull;\n        if (num > max) {\n          return `Number to big for '${type}'`;\n        }\n        if (num < 0n) {\n          const min: bigint = (max + 1n) / BigInt(-2);\n          if (num < min) {\n            return `Number to big for '${type}'`;\n          }\n        }\n      }\n    } catch (e) {\n      return \"Parsing integer failed\";\n    }\n  }\n\n  static parseNumber(string: string): bigint {\n    // Remove characters that can be used to make strings more human readable\n    string = string.replace(/[\\s_]+/g, \"\");\n    return BigInt(string);\n  }\n\n\n  static integerToBytes(integer: Values,\n    littleEndian: boolean = true): ByteString {\n    var error = Utils.getErrorMessage(integer);\n    if (error) {\n      throwBadInputError(error);\n    }\n    var num: bigint = Utils.parseNumber(integer.numberString);\n    let max = MAX_INT_MAP.get(integer.numberType);\n    let byteCount = BYTE_COUNT_MAP.get(integer.numberType);\n    if (!max || !byteCount) {\n      throw new Error(`Unknown number type: ${integer.numberType}`);\n    }\n    if (num < 0n) {\n      num += max + 1n;\n    }\n    let hex: string = num.toString(16);\n    let missingChars = 2 * byteCount - hex.length;\n    hex = \"0\".repeat(missingChars) + hex;//padd with leading zeros\n    let bytes: ByteString = ByteString.fromHex(hex);\n    return littleEndian ? bytes.reversed() : bytes;\n  }\n}\n","import React from 'react';\nimport ChooseOptionView from '../ChooseOptionView';\nimport * as Int from \"../../hex/Integer\";\n\nconst INT_SIZES = [Int.INT_8, Int.INT_16, Int.INT_32, Int.INT_64];\nconst LABLES = [\" as \", \" integer\"]\n\nexport default class IntegerEditView extends React.Component<Props, {}> {\n  render() {\n    return (\n      <div className=\"edit-container\">\n        <input type=\"text\"\n          value={this.props.values.numberString}\n          onChange={this.onValueChange} />\n        {LABLES[0]}\n        <ChooseOptionView\n          value={this.props.values.numberType}\n          onChange={this.onTypeChange}\n          options={INT_SIZES} />\n        {LABLES[1]}\n      </div>\n    );\n  }\n\n  onTypeChange = (newValue: string) => {\n    this.onChange({ numberType: newValue });\n  }\n\n  onValueChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    // only allow certain input characters: hex and 'o' and 'x' for 0x/0b\n    const newValue = event.target.value;\n    if (/^([0-9a-fA-Fxo]*)$/.test(newValue)) {\n      this.onChange({ numberString: newValue });\n    }\n  }\n\n  onChange(changedValues: any) {\n    this.props.onChange(Object.assign({}, this.props.values, changedValues));\n  }\n}\n\ninterface Props {\n  values: Int.Values,\n  onChange: (newValues: Int.Values) => void,\n}\n","import React from 'react';\nimport * as Str from '../../hex/String';\nimport * as Common from '../../Common';\n\nconst LABELS_NORMAL = [\"\", \" repeated \", \" time(s)\"];\nconst LABELS_REVERSED = [\"Reverse \", \" and repeat it \", \" time(s)\"];\n\nexport default class StringEditView extends React.Component<Props> {\n  render() {\n    const labels = this.props.values.type === Str.TYPE_REVERSED ?\n      LABELS_REVERSED : LABELS_NORMAL;\n    return (\n      <div className=\"edit-container\">\n        {labels[0]}\n        <input className=\"input-string\" type=\"text\"\n          value={this.props.values.pattern}\n          onChange={this.onPatternChange} />\n        {labels[1]}\n        <input className=\"input-count\" type=\"text\"\n          value={this.props.values.repeatCount}\n          onChange={this.onNumberChange} />\n        {labels[2]}\n      </div>);\n  }\n\n  onNumberChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (Common.isValidRepeatCountWhileEditing(event.target.value)) {\n      this.onChange({ repeatCount: event.target.value });\n    }\n  }\n\n  onPatternChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.onChange({ pattern: event.target.value });\n  }\n\n  onChange(changedValues: any) {\n    this.props.onChange(Object.assign({}, this.props.values, changedValues));\n  }\n}\n\nexport interface Props {\n  values: Str.Values,\n  onChange: (newValues: Str.Values) => void,\n}\n","import React from 'react';\n\nexport class ItemControls extends React.Component<Props, {}> {\n  render() {\n    let upClassName = this.props.index === 0 ? \"disabled-button\" : undefined;\n    let downClassName = this.props.isLast ? \"disabled-button\" : undefined;\n    return (\n      <div className=\"list-item-controls\">\n        <button\n          className={upClassName}\n          onClick={this.onMoveUp}\n          disabled={this.props.index === 0} >\n          <i className=\"fa fa-arrow-up\" aria-hidden=\"true\" />\n        </button>\n\n        <button\n          className={downClassName}\n          value=\"Down\"\n          onClick={this.onMoveDown}\n          disabled={this.props.isLast} >\n          <i className=\"fa fa-arrow-down\" aria-hidden=\"true\" />\n        </button>\n        <button\n          value=\"Delete\"\n          onClick={this.onDelete} >\n          <i className=\"fa fa-trash\" aria-hidden=\"true\" />\n        </button>\n      </div>);\n  }\n\n  onMoveUp = () => {\n    if (this.props.index > 0) {\n      this.props.onItemsSwap(this.props.index, this.props.index - 1);\n    }\n  }\n\n  onMoveDown = () => {\n    if (!this.props.isLast) {\n      this.props.onItemsSwap(this.props.index, this.props.index + 1);\n    }\n  }\n\n  onDelete = () => {\n    this.props.onItemDelete(this.props.index);\n  }\n}\n\ninterface Props {\n  index: number,\n  isLast: boolean,\n  onItemsSwap: (srcIndex: number, dstIndex: number) => void,\n  onItemDelete: (index: number) => void,\n}\n\nexport default ItemControls;\n","import React from 'react';\nimport ChooseOptionView from '../ChooseOptionView';\nimport Padding from './PaddingEditView';\nimport Integer from './IntegerEditView';\nimport String from './StringEditView';\nimport ReorderableItemControls from '../ItemControls';\nimport * as Int from '../../hex/Integer';\nimport * as Pad from '../../hex/Padding';\nimport * as Str from '../../hex/String';\nimport {AnyValues} from '../../hex/ByteStringBuilder';\n\nconst TYPE_MAP = new Map<string, TypeInfos>();\nTYPE_MAP.set(Int.TYPE, { defaultValues: Int.Utils.defaultValues, viewClass: Integer });\nTYPE_MAP.set(Str.TYPE, { defaultValues: Str.Utils.defaultValues, viewClass: String });\nTYPE_MAP.set(Str.TYPE_REVERSED, { defaultValues: Str.ReversedUtils.defaultValues, viewClass: String });\nTYPE_MAP.set(Pad.TYPE, { defaultValues: Pad.Utils.defaultValues, viewClass: Padding });\nconst TYPES = [...TYPE_MAP.keys()];\n\nfunction getTypeInfo(type: string): TypeInfos {\n  let ret = TYPE_MAP.get(type);\n  if (!ret) {\n    throw Error(`Unknown type: ${type}`);\n  }\n  return ret;\n}\n\nexport default class HexElementView extends React.Component<HexElementViewProps, HexElementViewProps> {\n  render() {\n    return (\n      <tr className=\"list-item multi-colored\">\n        <td>\n          <ChooseOptionView value={this.props.data.type} options={TYPES}\n            onChange={this.onTypeChange} />\n        </td>\n        <td>\n          {this.renderChild(this.props.data.type)}\n        </td>\n        <td>\n          <ReorderableItemControls\n            index={this.props.index}\n            isLast={this.props.isLast}\n            onItemsSwap={this.props.onItemsSwap}\n            onItemDelete={this.props.onItemDelete} />\n        </td>\n      </tr>\n    );\n  }\n\n  onTypeChange = (newType: string) => {\n    this.onChange(newType, getTypeInfo(newType).defaultValues());\n  }\n\n  onChildChange = (newValues: AnyValues) => {\n    this.onChange(this.props.data.type, newValues);\n  }\n\n  onChange(newType: string, newValues: AnyValues) {\n    const newData = Object.assign(newValues, { type: newType });\n    this.props.onChange(this.props.index, newData);\n  }\n\n  renderChild(type: string): any {\n    const viewClass = getTypeInfo(type).viewClass;\n    const props = {\n      onChange: this.onChildChange,\n      values: this.props.data,\n    };\n    return React.createElement(viewClass, props);\n  }\n\n  typeToClass(type: string): any {\n    let ret = TYPE_MAP.get(type)?.viewClass;\n    if (!ret) {\n      throw Error(`Unknown type: ${type}`);\n    }\n    return ret;\n  }\n};\n\ninterface HexElementViewProps {\n  index: number,\n  data: AnyValues,\n  isLast: boolean,\n  onItemsSwap: (srcIndex: number, dstIndex: number) => void,\n  onItemDelete: (index: number) => void,\n  onChange: (index: number, newValue: AnyValues) => void,\n}\n\ninterface TypeInfos {\n  defaultValues: () => AnyValues,\n  viewClass: any,\n}\n","import React from 'react';\nimport HexElementView from '../hex/HexElementView';\nimport { AnyValues } from '../../hex/ByteStringBuilder';\nimport { connect } from 'react-redux';\nimport { ListEntry, State as ReduxState } from '../../redux/store';\nimport {\n  listItemAdd, listItemDelete, listItemSwap,  listItemDeleteAll, listItemChanged\n} from '../../redux/actions';\n\n\nclass InputTable_ extends React.Component<Props>{\n  render() {\n    return (\n      <table className=\"input-table\">\n        <thead>\n          <tr>\n            <th>Type</th>\n            <th>Configuration</th>\n            <th>Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {this.props.entries.map((elem, index) => {\n            return (\n              <HexElementView\n                index={index}\n                key={elem.key}\n                isLast={index + 1 === this.props.entries.length}\n                onItemDelete={this.props.deleteListItem}\n                onItemsSwap={this.props.swapListItems}\n                onChange={this.props.updateItem}\n                data={elem.data} />\n            );\n          })}\n          <tr key={-1} className=\"row-buttons\">\n            <td colSpan={2}>\n              <button onClick={this.props.addListItem}>\n                Add new element\n                </button>\n            </td>\n            <td>\n              <button onClick={this.props.deleteAllListItems}>\n                Delete all\n              </button>\n            </td>\n          </tr>\n        </tbody>\n      </table >\n    );\n  }\n}\n\nexport interface Props {\n  entries: ListEntry[],\n  addListItem: () => void,\n  swapListItems: (indexA: number, indexB: number) => void,\n  deleteListItem: (index: number) => void,\n  deleteAllListItems: () => void,\n  updateItem: (index: number, newValue: AnyValues) => void,\n}\n\nconst mapStateToProps = (state: ReduxState, ownProps: any) => {\n  return {\n    ...ownProps,\n    entries: state.persistent.entries.list,\n  };\n};\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    addListItem: () => dispatch(listItemAdd()),\n    swapListItems: (indexA: number, indexB: number) => dispatch(listItemSwap(indexA, indexB)),\n    deleteListItem: (index: number) => dispatch(listItemDelete(index)),\n    deleteAllListItems: () => dispatch(listItemDeleteAll()),\n    updateItem: (index: number, newValue: AnyValues) => dispatch(listItemChanged(index, newValue)),\n  };\n};\n\nconst InputTable = connect(mapStateToProps, mapDispatchToProps)(InputTable_);\nexport default InputTable;\n","import { FormatState, State } from './store';\nimport { AnyValues } from '../hex/ByteStringBuilder';\n\n\n// action types\nexport const NOOP = \"NOOP\";\nexport const FORMAT_CHANGED = \"FORMAT_CHANGED\";\nexport const ENDIAN_TOGGLE = \"ENDIAN_TOGGLE\";\nexport const LIST_ADD = \"LIST_ADD\";\nexport const LIST_DELETE = \"LIST_DELETE\";\nexport const LIST_DELETE_ALL = \"LIST_DELETE_ALL\";\nexport const LIST_SWAP = \"LIST_SWAP\";\nexport const LIST_ITEM_UPDATE = \"LIST_ITEM_UPDATE\";\nexport const UPDATED_CLIPBORD_MANAGER = \"UPDATED_CLIPBORD_MANAGER\";\nexport const SET_STATE = \"SET_STATE\";\n\n// action payloads\nexport interface ListItemChangePayload {\n  index: number,\n  newValue: AnyValues,\n}\n\nexport interface ListSwapPayload {\n  indexA: number,\n  indexB: number,\n}\n\n// actions\nexport interface ActionWithoutPayload {\n  type: string,\n}\n\nexport interface FormatChangeAction {\n  type: string,\n  payload: FormatState,\n}\n\nexport interface SetStateAction {\n  type: string,\n  payload: State,\n}\n\nexport interface ListSwapAction {\n  type: string,\n  payload: ListSwapPayload,\n}\n\nexport interface ListDeleteAction {\n  type: string,\n  payload: number,\n}\n\nexport interface ListItemChangeAction {\n  type: string,\n  payload: ListItemChangePayload,\n}\n\nexport type Action = ActionWithoutPayload | FormatChangeAction |\n  SetStateAction | ListSwapAction | ListDeleteAction | ListItemChangeAction;\n\n// action creators\nexport function setFormat(format: FormatState): FormatChangeAction {\n  return {\n    type: FORMAT_CHANGED,\n    payload: format,\n  };\n}\n\nexport function toggleEndian(): ActionWithoutPayload {\n  return { type: ENDIAN_TOGGLE };\n}\n\n\nexport function listItemAdd(): ActionWithoutPayload {\n  return { type: LIST_ADD };\n}\n\nexport function listItemDelete(index: number): ListDeleteAction {\n  return { type: LIST_DELETE, payload: index };\n}\n\nexport function listItemSwap(indexA: number, indexB: number): ListSwapAction {\n  return { type: LIST_SWAP, payload: { indexA: indexA, indexB: indexB } };\n}\n\nexport function listItemDeleteAll(): ActionWithoutPayload {\n  return { type: LIST_DELETE_ALL };\n}\n\nexport function listItemChanged(index: number, newValue: AnyValues): ListItemChangeAction {\n  return { type: LIST_ITEM_UPDATE, payload: { index: index, newValue: newValue } };\n}\n\nexport function setState(newState: State): SetStateAction {\n  return { type: SET_STATE, payload: newState };\n}\n","import copy from 'copy-to-clipboard';\n\nexport class ClipboardManager {\n  text: string | null;\n\n  constructor() {\n    this.text = \"\";\n  }\n\n  setTextToCopy(text: string | null): void {\n    if (text !== this.text) {\n      this.text = text;\n    }\n  }\n\n  copyCurrent(): void {\n    if (this.text !== null) {\n      copy(this.text);\n    }\n  }\n\n  canCopy(): boolean {\n    return this.text !== null;\n  }\n}\n\nexport const instance: ClipboardManager = new ClipboardManager();\n\nexport default instance;\n","import React from 'react';\nimport ClipbordManager from '../ClipboardManager';\nimport { connect } from 'react-redux';\nimport { State as ReduxState } from '../redux/store';\n\n\nclass CopyButton_ extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { updateCounterWhenCopied: -1 };\n  }\n\n  render() {\n    if (!ClipbordManager.canCopy()) {\n      return null;\n    }\n\n    const isCopied = this.props.updateCounter === this.state.updateCounterWhenCopied;\n    const buttonText = isCopied ? \"Copied\" : \"Copy\";\n    return (\n      <button\n        className=\"copy-button\"\n        onClick={this.onClick}>\n        {buttonText}\n      </button>\n    );\n  }\n\n  onClick = (event: any) => {\n    if (ClipbordManager.canCopy()) {\n      ClipbordManager.copyCurrent();\n      this.setState({ updateCounterWhenCopied: this.props.updateCounter });\n    }\n  }\n}\n\nexport interface Props {\n  updateCounter: number,\n}\n\nexport interface State {\n  updateCounterWhenCopied: number,\n}\n\nconst mapStateToProps = (state: ReduxState, ownProps: any) => {\n  return {\n    ...ownProps,\n    updateCounter: state.updateCounter,\n  };\n};\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n  };\n};\n\nconst CopyButton = connect(mapStateToProps, mapDispatchToProps)(CopyButton_);\nexport default CopyButton;\n","import React from 'react';\nimport ChooseOptionView from './ChooseOptionView';\nimport { FormatState } from '../redux/store';\n\nexport class PresetOrCustomStringView extends React.Component<Props> {\n  render() {\n    return (\n      <div>\n        {this.props.label}\n        <ChooseOptionView\n          value={this.props.state.selected}\n          onChange={this.onTypeChange}\n          options={[...this.props.options.keys()]} />\n        {this.props.state.selected === this.props.customOption ?\n          <input type=\"text\"\n            value={this.props.state.custom}\n            onChange={this.onTextChange} /> : null}\n      </div>\n    );\n  }\n\n  onTypeChange = (newOption: string) => {\n    let newState = {\n      ...this.props.state,\n      selected: newOption,\n    };\n    if (newOption === this.props.customOption) {\n      newState.value = this.props.state.custom;\n    } else {\n      let tmp = this.props.options.get(newOption);\n      if (tmp === undefined) {\n        throw new Error(`Option ${newOption} has no value mapped`);\n      }\n      newState.value = tmp;\n    }\n    this.props.onStateChange(newState);\n  }\n\n  onTextChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    let newState = {\n      ...this.props.state,\n      value: event.target.value,\n      custom: event.target.value,\n    };\n    this.props.onStateChange(newState);\n  }\n}\n\nexport interface Props {\n  label?: string,\n  options: Map<string, string>,\n  customOption: string,\n  state: FormatState,\n  onStateChange: (newState: FormatState) => void,\n}\n\nexport default PresetOrCustomStringView;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PresetOrCustomStringView from \"../PresetOrCustomString\";\nimport { FormatState, State as ReduxState } from '../../redux/store';\nimport { setFormat } from '../../redux/actions';\n\n\nconst CUSTOM_FORMAT = \"custom\";\nconst DEFAULT_FORMAT = \"raw\";\nconst FORMAT_MAP = new Map<string, string>();\nFORMAT_MAP.set(DEFAULT_FORMAT, \"%x\");\nFORMAT_MAP.set(\"URL escaped\", \"%u\");\nFORMAT_MAP.set(\"python\", \"python -c 'print(\\\"%x\\\")'\");\nFORMAT_MAP.set(\"printf\", \"printf '%x'\");\nFORMAT_MAP.set(CUSTOM_FORMAT, \"You should never see this message! %x\")\n\nexport const DEFAULT_FORMAT_STATE: FormatState = {\n  selected: DEFAULT_FORMAT,\n  value: FORMAT_MAP.get(DEFAULT_FORMAT) || \"Default format value not found! %x\",\n  custom: \"yourCommand --flags '%x'\",\n}\n\n\nclass FormatChooser_ extends React.Component<Props> {\n  render() {\n    return <div className=\"format-chooser\">\n      <PresetOrCustomStringView options={FORMAT_MAP}\n        state={this.props.format}\n        customOption={CUSTOM_FORMAT}\n        onStateChange={this.props.setFormat}\n        label=\"Output format: \" />\n    </div>\n  }\n}\n\nexport interface Props {\n  format: FormatState,\n  setFormat: (format: FormatState) => void,\n}\n\nconst mapStateToProps = (state: ReduxState, ownProps: any) => {\n  return {\n    ...ownProps,\n    format: state.persistent.format,\n  };\n};\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    setFormat: (format: FormatState) => dispatch(setFormat(format)),\n  };\n};\n\nconst FormatChooser = connect(mapStateToProps, mapDispatchToProps)(FormatChooser_);\nexport default FormatChooser;\n","import ByteString from './ByteString';\n\n// non url safe\nconst REGEX_PLUS = /\\+/g;\nconst REGEX_SLASH = /\\//g;\nconst REGEX_EQUAL = /=/g;\n//url safe\nconst REGEX_MINUS = /-/g;\nconst REGEX_UNDERSCORE = /_/g;\n\nexport function uriSafeEncode(data: string): string {\n  const base64 = btoa(data);\n  return base64\n    .replace(REGEX_PLUS, '-')\n    .replace(REGEX_SLASH, '_')\n    .replace(REGEX_EQUAL, '');\n}\n\nexport function uriSafeDecode(base64: string): string {\n  base64 = base64\n    .replace(REGEX_MINUS, '+')\n    .replace(REGEX_UNDERSCORE, '/');\n\n  // add padding again\n  let lastBlockSize = base64.length % 4;\n  if (lastBlockSize !== 0) {\n    base64 += ('===').slice(0, 4 - lastBlockSize);\n  }\n  return atob(base64);\n}\n\nexport function escapeBytes(unescaped: ByteString, escapeFunction: (byte: string) => string): ByteString {\n  return new ByteString(unescaped.bytes.map(escapeFunction));\n}\n\nexport function urlEscapeByte(byte: string): string {\n  if (byte.length >= 4) {\n    // \"\\x??\" -> \"%??\"\n    return \"%\" + byte.slice(2);\n  } else {\n    return encodeURIComponent(byte);\n  }\n}\n\nexport function printfEscapeByte(byte: string): string {\n  if (byte.length === 1) {\n    switch (byte) {\n      // escape quote signs since they could mess up passing the payload to a program (eg printf)\n      case \"'\":\n        return \"\\\\x27\";\n      case \"\\\"\":\n        return \"\\\\x22\";\n      // escape spaces, since the html (used for displaying) does not handle consecutive whitespaces well\n      case \" \":\n        return \"\\\\x20\";\n      // escape backslashes, since they can cause a lot of problems\n      case \"\\\\\":\n        return \"\\\\x5c\";\n    }\n  }\n  return byte;\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { TaggedByteString, ByteStringBuilder } from '../../hex/ByteStringBuilder';\nimport * as Esc from '../../hex/Escaper';\nimport { ListEntry, State as ReduxState } from '../../redux/store';\nimport ClipboardManager from '../../ClipboardManager';\n\nconst INSERT_HERE_REGEX = /%[xu]/g;\n\n\nclass ColoredHexStringView_ extends React.Component<Props> {\n  render() {\n    const labels = this.props.formatString.split(INSERT_HERE_REGEX);\n    if (labels.length !== 2) {\n      return this.renderErrorMessage('Format has to contain exactly one \"%x\" (\\\\x?? escape) or \"%u\" (%?? escape)');\n    }\n    const isPercentXEscape = this.props.formatString.indexOf(\"%x\") >= 0;\n    const escapeFunction = isPercentXEscape ? Esc.printfEscapeByte : Esc.urlEscapeByte;\n\n    let result = new ByteStringBuilder(this.props.isLittleEndian)\n      .getBytesStrings(this.props.blueprints);\n    if (result.errorMessage) {\n      return this.renderErrorMessage(result.errorMessage);\n    }\n\n    let escapedTaggedStrings: TaggedString[] = result.byteStrings.map((bs: TaggedByteString) => {\n      return {\n        key: bs.key,\n        str: Esc.escapeBytes(bs.data, escapeFunction).toString(),\n      };\n    });\n\n    let textToCopy = escapedTaggedStrings.map((tbs) => { return tbs.str }).join(\"\");\n    textToCopy = labels[0] + textToCopy + labels[1];\n    ClipboardManager.setTextToCopy(textToCopy);\n\n    return <span>\n      {labels[0]}\n      {escapedTaggedStrings.map((value: TaggedString) => {\n        return <span className=\"multi-colored\" key={value.key}>\n          {value.str}\n        </span>;\n      })}\n      {labels[1]}\n    </span>;\n  }\n\n  renderErrorMessage(text: string) {\n    ClipboardManager.setTextToCopy(null);\n    return <span className=\"err-msg\">\n      {text}\n    </span>\n  }\n}\n\nexport interface Props {\n  blueprints: ListEntry[],\n  isLittleEndian: boolean,\n  formatString: string,\n}\n\ninterface TaggedString {\n  str: string,\n  key: number,\n}\n\nconst mapStateToProps = (state: ReduxState, ownProps: any) => {\n  return {\n    ...ownProps,\n    isLittleEndian: state.persistent.isLittleEndian,\n    blueprints: state.persistent.entries.list,\n    formatString: state.persistent.format.value,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {};\n};\n\nconst ColoredHexStringView = connect(mapStateToProps, mapDispatchToProps)(ColoredHexStringView_);\nexport default ColoredHexStringView;\n","import React from 'react';\nimport Checkbox from 'rc-checkbox';\nimport { connect } from 'react-redux';\nimport { ListEntry, State as ReduxState } from '../../redux/store';\nimport { toggleEndian } from '../../redux/actions';\n\n\nclass EndianToggleView_ extends React.Component<Props> {\n  render() {\n    if (!this.isVisible()) {\n      return null;\n    }\n\n    return (\n      <div className=\"endian-toggle\">\n        <label>\n          <Checkbox\n            className=\"cell\"\n            checked={this.props.isLittleEndian}\n            onChange={this.props.toggleEndian}\n          />\n          {\"use little endian\"}\n        </label>\n      </div>\n    );\n  }\n\n  isVisible(): boolean {\n    for (let i = 0; i < this.props.blueprints.length; i++) {\n      if (this.props.blueprints[i].data.type === \"Integer\") {\n        // Only show if at least one element is of type Integer\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\nexport interface Props {\n  blueprints: ListEntry[],\n  isLittleEndian: boolean,\n  toggleEndian: () => void,\n}\n\nconst mapStateToProps = (state: ReduxState, ownProps: any) => {\n  return {\n    ...ownProps,\n    isLittleEndian: state.persistent.isLittleEndian,\n    blueprints: state.persistent.entries.list,\n  };\n};\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    toggleEndian: () => dispatch(toggleEndian()),\n  };\n};\n\nconst EndianToggleView = connect(mapStateToProps, mapDispatchToProps)(EndianToggleView_);\nexport default EndianToggleView;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport CopyButton from '../CopyButton';\nimport FormatChooser from \"./FormatChooser\";\nimport { State as ReduxState } from '../../redux/store';\nimport ColoredHexStringView from './ColoredHexStringView';\nimport EndianToggle from './EndianToggleView';\n\nclass OutputView_ extends React.Component<Props> {\n  render() {\n    return (\n      <div className=\"byte-output\">\n        <div className=\"output-settings\">\n          <div className=\"wrapper\">\n            <FormatChooser />\n            <EndianToggle />\n            <CopyButton />\n          </div>\n        </div>\n        <ColoredHexStringView />\n      </div>\n    );\n  }\n}\n\nexport interface Props {\n}\n\nconst mapStateToProps = (state: ReduxState, ownProps: any) => {\n  return {\n    ...ownProps,\n  };\n};\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n  };\n};\n\nconst OutputView = connect(mapStateToProps, mapDispatchToProps)(OutputView_);\nexport default OutputView;\n","import * as Actions from './actions';\nimport { State, fallbackState } from './store';\nimport { Utils as StringUtils } from '../hex/String';\n\n\nexport function reducer(state: State | undefined, action: Actions.Action): State {\n  if (!state) {\n    console.warn(\"No state was supplied to reducer. Falling back to default values\");\n    state = fallbackState;\n  }\n\n  state = {\n    ...state,\n    updateCounter: state.updateCounter + 1,\n  };\n\n  switch (action.type) {\n    case Actions.FORMAT_CHANGED: {\n      let payload = (action as Actions.FormatChangeAction).payload;\n      return {\n        ...state,\n        persistent: {\n          ...state.persistent,\n          format: payload,\n        },\n      };\n    }\n    case Actions.ENDIAN_TOGGLE: {\n      return {\n        ...state,\n        persistent: {\n          ...state.persistent,\n          isLittleEndian: !state.persistent.isLittleEndian,\n        },\n      };\n    }\n    case Actions.LIST_ADD: {\n      let listCopy = [...state.persistent.entries.list];\n      let newEntry = StringUtils.defaultValues();\n      newEntry.pattern = \"A\".repeat(listCopy.length + 1);\n      listCopy.push({\n        key: state.persistent.entries.nextId,\n        data: newEntry\n      });\n\n      return {\n        ...state,\n        persistent: {\n          ...state.persistent,\n          entries: {\n            list: listCopy,\n            nextId: state.persistent.entries.nextId + 1,\n          },\n        },\n      };\n    }\n    case Actions.LIST_SWAP: {\n      let payload = (action as Actions.ListSwapAction).payload;\n      let listCopy = [...state.persistent.entries.list];\n      let tmp = listCopy[payload.indexA];\n      listCopy[payload.indexA] = listCopy[payload.indexB];\n      listCopy[payload.indexB] = tmp;\n\n      return {\n        ...state,\n        persistent: {\n          ...state.persistent,\n          entries: {\n            ...state.persistent.entries,\n            list: listCopy,\n          },\n        },\n      };\n    }\n    case Actions.LIST_ITEM_UPDATE: {\n      let payload = (action as Actions.ListItemChangeAction).payload;\n      let listCopy = [...state.persistent.entries.list];\n      listCopy[payload.index] = {\n        ...listCopy[payload.index],\n        data: payload.newValue,\n      }\n\n      return {\n        ...state,\n        persistent: {\n          ...state.persistent,\n          entries: {\n            ...state.persistent.entries,\n            list: listCopy,\n          },\n        },\n      };\n    }\n    case Actions.LIST_DELETE: {\n      let index = (action as Actions.ListDeleteAction).payload;\n      let listCopy = [...state.persistent.entries.list];\n      listCopy.splice(index, 1);\n\n      return {\n        ...state,\n        persistent: {\n          ...state.persistent,\n          entries: {\n            ...state.persistent.entries,\n            list: listCopy,\n          },\n        },\n      };\n    }\n    case Actions.LIST_DELETE_ALL: {\n      return {\n        ...state,\n        persistent: {\n          ...state.persistent,\n          entries: {\n            list: [],\n            nextId: 0,\n          },\n        },\n      };\n    }\n    case Actions.SET_STATE: {\n      let payload: State = (action as Actions.SetStateAction).payload;\n      return {\n        ...payload,\n        updateCounter: state.updateCounter,\n      }\n    }\n  }\n  return state;\n}\n\nexport default reducer\n","import { createStore } from 'redux';\nimport { reducer } from './reducer';\nimport { AnyValues } from '../hex/ByteStringBuilder';\nimport { DEFAULT_FORMAT_STATE } from '../views/hex/FormatChooser';\n\nexport interface State {\n  persistent: PersistentState,\n  updateCounter: number,\n}\n\nexport interface PersistentState {\n  isLittleEndian: boolean,\n  format: FormatState,\n  entries: {\n    list: ListEntry[],\n    nextId: number,\n  },\n}\n\nexport interface ListEntry {\n  key: number,\n  data: AnyValues,\n}\n\nexport interface FormatState {\n  selected: string,\n  value: string,\n  custom: string,\n}\n\nexport const fallbackState: State = {\n  persistent: {\n    isLittleEndian: true,\n    format: DEFAULT_FORMAT_STATE,\n    entries: {\n      list: [],\n      nextId: 0,\n    },\n  },\n  updateCounter: 0,\n}\n\n\nconst devTools: any = (window as any).__REDUX_DEVTOOLS_EXTENSION__ ? (window as any).__REDUX_DEVTOOLS_EXTENSION__(\n  { trace: true, traceLimit: 25 }\n) : {};\n\nexport const store = createStore(reducer, fallbackState, devTools);\n","import { State, PersistentState, fallbackState } from './store';\nimport { uriSafeDecode, uriSafeEncode } from '../hex/Escaper';\nimport { AnyValues } from '../hex/ByteStringBuilder';\nimport { store } from './store';\nimport { setState } from './actions';\n\ninterface MinimizedState {\n  le: boolean,\n  f: {\n    s: string,\n    v: string,\n    c: string,\n  },\n  l: AnyValues[],//TODO compress this\n}\n\nfunction minimizeState(s: PersistentState): MinimizedState {\n  return {\n    le: s.isLittleEndian,\n    f: {\n      s: s.format.selected,\n      v: s.format.value,\n      c: s.format.custom,\n    },\n    l: s.entries.list.map((x: any) => x.data),\n  }\n}\n\nfunction unminimizeState(min: MinimizedState): State {\n  let list = min.l.map(\n    (data: AnyValues, index: number) => { return { key: index, data: data } }\n  );\n  return {\n    ...fallbackState,\n    persistent: {\n      isLittleEndian: min.le,\n      format: {\n        selected: min.f.s,\n        value: min.f.v,\n        custom: min.f.c,\n      },\n      entries: {\n        list: list,\n        nextId: list.length,\n      }\n    }\n  }\n}\n\n\nexport function exportToUri(): string {\n  let stateString = serialize(store.getState().persistent);\n\n  // take the current url and set the import param to our current state\n  const urlBuilder = new URL(window.location.href);\n  urlBuilder.searchParams.set(\"import\", stateString);\n  return urlBuilder.href;\n}\n\n\nexport function tryImportFromUri(): boolean {\n  const url = new URL(window.location.href);\n  const data = url.searchParams.get(\"import\");\n  if (!data){\n    console.log(\"URI does not contain data to import\");\n    return false;\n  }\n  return tryImportFromString(data);\n}\n\nexport function tryImportFromString(data: string): boolean {\n  try {\n    const state = deserialize(data);\n    store.dispatch(setState(state));\n    return true;\n  } catch (e) {\n    console.error(\"Loading state failed:\", e);\n    return false;\n  }\n}\n\n\nexport function serialize(state: PersistentState): string {\n  let min = minimizeState(state);\n  console.log(\"exported state\", min);\n  return uriSafeEncode(JSON.stringify(min));\n}\n\nexport function deserialize(data: string): State {\n  try {\n    let jsonText = tryOrMessage(() => uriSafeDecode(data), `Decoding base64 failed\\nBase64 text: '${data}'`);\n    let deserialized = tryOrMessage(() => JSON.parse(jsonText), `Decoding JSON failed!\\nJSON: ${jsonText}`);\n    let min = deserialized as MinimizedState;\n    if (!min){\n      throw new Error(\"Missing keys in decoded JSON\");\n    }\n    //TODO check if it matches the type\n    return unminimizeState(min);\n  } catch (error) {\n    throw new Error(`deserialize failed: ${error}`)\n  }\n}\n\nfunction tryOrMessage(fn: () => any, message: string): any {\n  try {\n    return fn();\n  } catch (error) {\n    throw new Error(`${message}\\n\\nCaused by '${error}'`);\n  }\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { State as ReduxState } from '../../redux/store';\nimport { exportToUri } from '../../redux/persistence';\n\nclass ExportUriView_ extends React.Component<Props> {\n  render() {\n    const url = exportToUri();\n\n    return <span>\n      You can return to the current state (or share it with someone) by visiting:\n      <br /><br />\n      {url}\n      <br /><br />\n      <b>{\"[Warning] This software is still under development, so I might change/break the format sometimes.\"}</b>\n    </span>;\n  }\n}\n\n\nexport interface Props {\n  state: any,\n  // updatedClipbordManager: () => void,\n}\n\nconst mapStateToProps = (state: ReduxState, ownProps: any) => {\n  return {\n    ...ownProps,\n    state: state.persistent,\n  };\n};\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    // updatedClipbordManager: () => dispatch(updatedClipbordManager()),\n  };\n};\n\nconst ExportUriView = connect(mapStateToProps, mapDispatchToProps)(ExportUriView_);\nexport default ExportUriView;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport './App.scss';\nimport InputTable from './app/views/hex/InputTable';\nimport OutputView from './app/views/hex/OutputView';\nimport ExportUriView from './app/views/hex/ExportUriView';\nimport { State } from './app/redux/store';\n\n\n// TODO: next steps\n//  - a menu to quickly jump to any section? like <a href=\"#export-link\">Export link</a>\n//  - explain that export is a snapshot, reword \"session\"\n//  - (opt) compress the json before base64\n//  - Fix names\n\nclass App_ extends React.Component<any> {\n  render() {\n    return (\n      <div className=\"app-root\">\n        <div id=\"input\">\n          <InputTable />\n        </div>\n        <div id=\"output\">\n          <OutputView />\n        </div>\n        <div id=\"export-link\" className=\"export-link\">\n          <ExportUriView />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: State, ownProps: any) => {\n  return {\n    ...ownProps,\n  };\n};\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n  };\n};\n\nexport const App = connect(mapStateToProps, mapDispatchToProps)(App_);\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {store} from './app/redux/store';\nimport {tryImportFromUri, tryImportFromString} from './app/redux/persistence';\n\nfunction importData(){\n  if (!tryImportFromUri()) {\n    console.info(\"Falling back on default values\");\n    const defaultValues = \"eyJsZSI6dHJ1ZSwiZiI6eyJzIjoicmF3IiwidiI6IiV4IiwiYyI6InlvdXJDb21tYW5kIC0tZmxhZ3MgJyV4JyJ9LCJsIjpbeyJwYXR0ZXJuIjoiPT09IFF1aWNrIHN0YXJ0IGluc3RydWN0aW9ucyA9PT0iLCJyZXBlYXRDb3VudCI6MSwidHlwZSI6IlN0cmluZyJ9LHsicGF0dGVybiI6IiAtIElucHV0IG5vbiBhc2NpaSBjaGFycyBsaWtlIHRoaXM6IFxceD8_IHdoZXJlID8_IGlzIHRoZSBoZXggY29kZSBvZiB0aGUgY2hhciIsInJlcGVhdENvdW50IjoxLCJ0eXBlIjoiU3RyaW5nIn0seyJwYXR0ZXJuIjoiICAgQWxsIG90aGVyIGJhY2tzbGFzaGVzIGFyZSBlc2NhcGVkLiBTbyB1c2UgJ1xceDBhJyBpbnN0ZWFkIG9mICdcXG4nISIsInJlcGVhdENvdW50IjoxLCJ0eXBlIjoiU3RyaW5nIn0seyJwYXR0ZXJuIjoiIC0gWW91IGNhbiBhZGQgcGFkZGluZyBsaWtlIGJlbG93OiIsInJlcGVhdENvdW50IjoxLCJ0eXBlIjoiU3RyaW5nIn0seyJwYXR0ZXJuIjoiXFx4OTAiLCJwYWRkVG9MZW5ndGgiOiIyNTYiLCJ0eXBlIjoiUGFkZGluZyJ9LHsicGF0dGVybiI6IiAtIFlvdSBjYW4gcHV0IGFuIGFkZHJlc3MgaW50byBtZW1vcnkgbGlrZSBiZWxvdzoiLCJyZXBlYXRDb3VudCI6MSwidHlwZSI6IlN0cmluZyJ9LHsibnVtYmVyU3RyaW5nIjoiMHgxMjM0NTY3OCIsIm51bWJlclR5cGUiOiIzMiBiaXQiLCJ0eXBlIjoiSW50ZWdlciJ9LHsicGF0dGVybiI6IiAtIFlvdSBjYW4gc2VlIHRoZSBvdXRwdXQgaW4gdGhlIGJveCBiZWxvdyIsInJlcGVhdENvdW50IjoxLCJ0eXBlIjoiU3RyaW5nIn0seyJwYXR0ZXJuIjoiICAgVG8gcXVpY2tseSBjb3B5IGl0IGhpdCB0aGUgY29weSBidXR0b24iLCJyZXBlYXRDb3VudCI6MSwidHlwZSI6IlN0cmluZyJ9XX0\";\n    if (!tryImportFromString(defaultValues)) {\n      alert(\"[Bug/Compat breaking change] Parsing hardcoded initial state failed\");\n    }\n  }\n}\n\nimportData();\n\nReactDOM.render(\n  <React.StrictMode>\n     <Provider store={store}>\n        <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}