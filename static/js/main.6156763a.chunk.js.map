{"version":3,"sources":["app/views/ChooseOptionView.tsx","app/Common.ts","app/views/hex/PaddingEditView.tsx","app/hex/ByteString.ts","app/hex/Padding.ts","app/hex/String.ts","app/hex/ByteStringBuilder.ts","app/hex/Integer.ts","app/views/hex/IntegerEditView.tsx","app/views/hex/StringEditView.tsx","app/views/list/ReorderableItemControls.tsx","app/views/hex/HexElementView.tsx","app/views/list/ReorderableListView.tsx","app/views/CopyButton.tsx","app/views/PresetOrCustomString.tsx","app/hex/Escaper.ts","app/views/hex/OutputView.tsx","App.tsx","serviceWorker.js","index.js"],"names":["ChooseOptionView","onChange","event","props","target","value","this","key","disabled","hidden","prompt","options","map","i","React","Component","isValidRepeatCountWhileEditing","repeatCountString","repeatCount","Number","isNaN","LABELS","PaddingEditView","onNumberChange","Common","paddToLength","onPatternChange","pattern","className","type","values","changedValues","Object","assign","hexEscapeRegex","ByteString","bytes","join","other","push","copy","reverse","n","repeated","length","str","slice","match","hex","Error","len","result","Array","Utils","padding","previousByteStrings","offset","missing","throwBadInputError","patternBytes","fromString","Math","floor","incompleteSize","incompletePadding","ReversedUtils","reversed","ERROR_BYTE_STRING","data","message","e","name","ByteStringBuilder","littleEndian","blueprintList","processed","previous","toBytes","entry","byteStrings","errorMessage","blueprint","Padding","paddingToBytes","Int","integerToBytes","Str","stringToBytes","TYPE","MAX_INT_MAP","Map","set","BYTE_COUNT_MAP","numberString","numberType","integer","num","parseNumber","maxOrNull","get","max","BigInt","string","replace","error","getErrorMessage","byteCount","toString","missingChars","repeat","fromHex","INT_SIZES","LABLES","IntegerEditView","onTypeChange","newValue","onValueChange","test","LABELS_NORMAL","LABELS_REVERSED","StringEditView","labels","ListItemControls","onMoveUp","index","onItemsSwap","onMoveDown","isLast","onDelete","onItemDelete","onClick","TYPE_MAP","defaultValues","viewClass","Integer","String","Pad","TYPES","keys","getTypeInfo","ret","HexElementView","newType","onChildChange","newValues","renderChild","ReorderableItemControls","newData","createElement","ReorderableListView","onItemAdd","state","entries","newItemData","nextId","onItemChange","onItemSwapped","indexFrom","indexTo","tmp","onItemDeleted","splice","initialEntries","initialValues","elem","style","width","newArray","setState","CopyButton","text","copiedText","buttonText","PresetOrCustomStringView","option","isCustom","lastCustomValue","undefined","customFormat","customOption","label","escapeBytes","unescaped","escapeFunction","urlEscapeByte","byte","encodeURIComponent","printfEscapeByte","FORMAT_MAP","OutputView","onFormatChange","newFormat","format","onEndianChange","isLittleEndian","checked","default_format_value","renderData","getRenderData","usesIntegers","blueprints","textToCopy","dom","parts","split","exportRenderData","normalRenderData","x","stateString","JSON","stringify","btoa","urlBuilder","URL","window","location","href","searchParams","url","getBytesStrings","escapedTaggedStrings","bs","Esc","tbs","App","initialState","onListChange","newBlueprints","importParam","stateText","parseInitialValuesJson","entryClass","v","atob","parsedJson","parse","validator","isValid","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.6156763a.chunk.js","sourcesContent":["import React from 'react';\n\nexport class ChooseOptionView extends React.Component<ChooseOptionViewProps, {}> {\n  static defaultValue(): string {\n    return \"\";\n  }\n\n  render() {\n    return (<select onChange={(event) => { this.props.onChange(event.target.value) }} value={this.props.value}>\n      <option value=\"\" key={-1} disabled hidden>\n        {this.props.prompt ? this.props.prompt : \"Choose a option\"}\n      </option>\n      {this.props.options.map((value: string, i: number) => {\n        // Here using key=index should be ok, since the order should not change\n        return <option value={value} key={i}>{value}</option>;\n      })}\n    </select>);\n  }\n}\n\nexport interface ChooseOptionViewProps {\n  prompt?: string,\n  value: string,\n  options: string[],\n  onChange: (newValue: string) => void,\n}\n\nexport default ChooseOptionView;\n","// Do not allow arbitrary large values for repeatCount, paddToLength, etc to\n// prevent you from accidentially DoS'ing yourself. Happened to me ;D\nexport const MAX_REPEAT_INT = 100000 - 1;\nexport const OUTPUT_COLORS = [\"red\", \"green\", \"blue\"];\n\nexport function isValidRepeatCountWhileEditing(repeatCountString: string): boolean {\n  if (repeatCountString === \"\") {\n    // allow the empty string while editing\n    return true;\n  } else {\n    const repeatCount = Number(repeatCountString);\n    return (!isNaN(repeatCount)) && (repeatCount > 0) && (repeatCount <= MAX_REPEAT_INT);\n  }\n}\n\nexport function clamp(minInclusive: number, value: number, maxInclusive: number) {\n  return Math.max(minInclusive, Math.min(value, maxInclusive));\n};\n","import React from 'react';\nimport * as Padding from '../../hex/Padding';\nimport * as Common from '../../Common';\n\nconst LABELS = [\"Repeat \", \" up to index \"];\n\nexport default class PaddingEditView extends React.Component<Props> {\n  render() {\n    return (\n      <div className=\"edit-container\">\n        {LABELS[0]}\n        <input className=\"input-string\" type=\"text\"\n          value={this.props.values.pattern}\n          onChange={this.onPatternChange} />\n        {LABELS[1]}\n        <input className=\"input-count\" type=\"text\"\n          value={this.props.values.paddToLength}\n          onChange={this.onNumberChange} />\n      </div>);\n  }\n\n  onNumberChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (Common.isValidRepeatCountWhileEditing(event.target.value)) {\n      this.onChange({ paddToLength: event.target.value });\n    }\n  }\n\n  onPatternChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.onChange({ pattern: event.target.value });\n  }\n\n  onChange(changedValues: any) {\n    this.props.onChange(Object.assign({}, this.props.values, changedValues));\n  }\n}\n\nexport interface Props {\n  values: Padding.Values,\n  onChange: (newValues: Padding.Values) => void,\n}\n","const hexEscapeRegex = /\\x[0-9a-fA-F]{2}/\n\nexport default class ByteString {\n  bytes: string[];\n\n  constructor(bytes: string[]) {\n    this.bytes = bytes;\n  }\n\n  get length(): number {\n    return this.bytes.length;\n  }\n\n  toString(): string {\n    return this.bytes.join(\"\");\n  }\n\n  append(other: ByteString) {\n    this.bytes.push(...other.bytes);\n  }\n\n  reversed(): ByteString {\n    let copy = [...this.bytes];\n    copy.reverse();\n    return new ByteString(copy);\n  }\n\n  repeated(n: number): ByteString {\n    let repeated = [];\n    for (let i = 0; i < n; i++) {\n      repeated.push(...this.bytes);\n    }\n    return new ByteString(repeated);\n  }\n\n  static fromString(str: string): ByteString {\n    let bytes: string[] = [];\n    let i = 0;\n    while (i < str.length) {\n      let slice = str.slice(i, i + 4);\n      if (slice.match(hexEscapeRegex)) {\n        // add \"\\x??\" as one byte\n        bytes.push(slice);\n        i += 4;\n      } else {\n        bytes.push(str[i]);\n        i += 1;\n      }\n    }\n    return new ByteString(bytes);\n  }\n\n  static fromHex(hex: string): ByteString {\n    if (hex.length % 2 === 1) {\n      throw new Error(\"Hex has odd length\");\n    }\n    const len = hex.length / 2;\n    let result = Array(len);\n    for (var i = 0; i < len; i++) {\n      result[i] = \"\\\\x\" + hex.slice(2 * i, 2 * i + 2);\n    }\n    return new ByteString(result);\n  }\n}\n","import ByteString from \"./ByteString\";\nimport {throwBadInputError} from \"./ByteStringBuilder\";\n\nexport interface Values {\n  paddToLength: number,\n  pattern: string,\n  type: string,\n}\n\nexport const TYPE = \"Padding\";\n\n\nexport class Utils {\n  static defaultValues(): Values {\n    return {\n      pattern: \"A\",\n      paddToLength: 1,\n      type: TYPE,\n    };\n  }\n\n  static paddingToBytes(padding: Values, previousByteStrings: ByteString[]): ByteString {\n    var offset = 0;\n    for (var i = 0; i < previousByteStrings.length; i++) {\n      offset += previousByteStrings[i].bytes.length;\n    }\n    var missing = padding.paddToLength - offset;\n    if (missing < 0) {\n      throwBadInputError(`Padding should be applied up to index ${padding.paddToLength}, but the string is already longer than that (length=${offset})`);\n    }\n    if (!padding.pattern) {\n      throwBadInputError(\"Padding can not be empty\");\n    }\n\n    const patternBytes = ByteString.fromString(padding.pattern);\n    const repeatCount = Math.floor(missing / patternBytes.length);\n    const incompleteSize = missing - (repeatCount * patternBytes.length)\n\n    const incompletePadding: string[] = patternBytes.bytes.slice(0, incompleteSize);\n    let repeated = patternBytes.repeated(repeatCount);\n    repeated.bytes.push(...incompletePadding);\n    return repeated;\n  }\n}\n\nexport default Values;\n","import ByteString from \"./ByteString\";\n\nexport interface Values {\n  repeatCount: number,\n  pattern: string,\n  type: string,\n}\n\nexport const TYPE = \"String\";\nexport const TYPE_REVERSED = \"String (reversed)\";\n\n\nexport class Utils {\n  static defaultValues(): Values {\n    return {\n      pattern: \"A\",\n      repeatCount: 1,\n      type: TYPE,\n    };\n  }\n\n  static stringToBytes(values: Values): ByteString {\n    let bytes = ByteString.fromString(values.pattern);\n    return bytes.repeated(values.repeatCount);\n  }\n}\n\nexport class ReversedUtils {\n  static defaultValues(): Values {\n    return {\n      pattern: \"A\",\n      repeatCount: 1,\n      type: TYPE_REVERSED,\n    };\n  }\n\n  static stringToBytes(values: Values): ByteString {\n    let bytes = ByteString.fromString(values.pattern);\n    return bytes.reversed().repeated(values.repeatCount);\n  }\n}\n\nexport default Values;\n","import * as Padding from './Padding';\nimport * as Int from './Integer';\nimport * as Str from './String';\nimport ByteString from './ByteString';\n\nconst BAD_INPUT_ERROR_NAME = \"BadInputError\";\nconst ERROR_BYTE_STRING: TaggedByteString = {\n  key: -1,\n  data: ByteString.fromString(\"Error: Please check your inputs. @dev: This message should not be shown\"),\n}\n\nexport function throwBadInputError(message: string) {\n  // This function creates an error that signals, that it was caused by bad user input\n  let e = new Error(message || \"Something went wrong. Please check your inputs\")\n  e.name = BAD_INPUT_ERROR_NAME;\n  throw e;\n}\n\nexport class ByteStringBuilder {\n  littleEndian: boolean;\n\n  constructor(littleEndian: boolean = true) {\n    this.littleEndian = littleEndian;\n  }\n\n  getBytesStrings(blueprintList: Blueprint[]): BuilderResult {\n    let i: number = 0;\n    try {\n      let processed: TaggedByteString[] = [];\n      let previous: ByteString[] = [];\n      for (i = 0; i < blueprintList.length; i++) {\n        let bytes: ByteString = this.toBytes(blueprintList[i].data, previous);\n        let entry = { key: blueprintList[i].key, data: bytes };\n        previous.push(bytes);\n        processed.push(entry);\n      }\n      return { byteStrings: processed };\n    } catch (e) {\n      if (e.name === BAD_INPUT_ERROR_NAME) {\n        return { errorMessage: `Error in input ${i + 1}: ${e.message}`, byteStrings: [ERROR_BYTE_STRING] };\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  toBytes(blueprint: AnyValues, previousByteStrings: ByteString[]): ByteString {\n    switch (blueprint.type) {\n      case Padding.TYPE:\n        return Padding.Utils.paddingToBytes(blueprint as Padding.Values, previousByteStrings);\n      case Int.TYPE:\n        return Int.Utils.integerToBytes(blueprint as Int.Values, this.littleEndian);\n      case Str.TYPE:\n        return Str.Utils.stringToBytes(blueprint as Str.Values);\n      case Str.TYPE_REVERSED:\n        return Str.ReversedUtils.stringToBytes(blueprint as Str.Values);\n      default:\n        throw new Error(\"Unknown type\");\n    }\n  }\n\n  isValid(blueprint: AnyValues): boolean {\n    try {\n      this.toBytes(blueprint, []);//will throw error if is not valid\n      return true;\n    } catch {\n      return false;\n    }\n  }\n};\n\nexport type AnyValues = Padding.Values | Int.Values | Str.Values;\n\n\nexport interface Blueprint {\n  key: number,\n  data: AnyValues,\n}\n\nexport interface BuilderResult {\n  byteStrings: TaggedByteString[],\n  errorMessage?: string,\n}\n\nexport interface TaggedByteString {\n  key: number,\n  data: ByteString,\n}\n\nexport default ByteStringBuilder;\n","import ByteString from \"./ByteString\";\nimport {throwBadInputError} from \"./ByteStringBuilder\";\n\nexport const INT_8 = \"8 bit\";\nexport const INT_16 = \"16 bit\";\nexport const INT_32 = \"32 bit\";\nexport const INT_64 = \"64 bit\";\nexport const TYPE = \"Integer\";\n\nconst MAX_INT_MAP = new Map<string, bigint>();\nMAX_INT_MAP.set(INT_8, 0xffn);\nMAX_INT_MAP.set(INT_16, 0xffffn);\nMAX_INT_MAP.set(INT_32, 0xffffffffn);\nMAX_INT_MAP.set(INT_64, 0xffffffffffffffffn);\n\nconst BYTE_COUNT_MAP = new Map<string, number>();\nBYTE_COUNT_MAP.set(INT_8, 1);\nBYTE_COUNT_MAP.set(INT_16, 2);\nBYTE_COUNT_MAP.set(INT_32, 4);\nBYTE_COUNT_MAP.set(INT_64, 8);\n\nexport interface Values {\n  numberString: string,\n  numberType: string,\n  type: string,\n}\n\nexport class Utils {\n  static defaultValues(): Values {\n    return {\n      numberString: \"0x41414141\",\n      numberType: INT_32,\n      type: TYPE,\n    };\n  }\n\n  static getErrorMessage(integer: Values) {\n    try {\n      var num: bigint = Utils.parseNumber(integer.numberString);\n      const type: string = integer.numberType;\n      let maxOrNull = MAX_INT_MAP.get(type);\n      if (!maxOrNull) {\n        throw new Error(`Unknown number type: ${type}`);\n      } else {\n        let max: bigint = maxOrNull;\n        if (num > max) {\n          return `Number to big for '${type}'`;\n        }\n        if (num < 0n) {\n          const min: bigint = (max + 1n) / BigInt(-2);\n          if (num < min) {\n            return `Number to big for '${type}'`;\n          }\n        }\n      }\n    } catch (e) {\n      return \"Parsing integer failed\";\n    }\n  }\n\n  static parseNumber(string: string): bigint {\n    // Remove characters that can be used to make strings more human readable\n    string = string.replace(/[\\s_]+/g, \"\");\n    return BigInt(string);\n  }\n\n\n  static integerToBytes(integer: Values,\n    littleEndian: boolean = true): ByteString {\n    var error = Utils.getErrorMessage(integer);\n    if (error) {\n      throwBadInputError(error);\n    }\n    var num: bigint = Utils.parseNumber(integer.numberString);\n    let max = MAX_INT_MAP.get(integer.numberType);\n    let byteCount = BYTE_COUNT_MAP.get(integer.numberType);\n    if (!max || !byteCount) {\n      throw new Error(`Unknown number type: ${integer.numberType}`);\n    }\n    if (num < 0n) {\n      num += max + 1n;\n    }\n    let hex: string = num.toString(16);\n    let missingChars = 2 * byteCount - hex.length;\n    hex = \"0\".repeat(missingChars) + hex;//padd with leading zeros\n    let bytes: ByteString = ByteString.fromHex(hex);\n    return littleEndian ? bytes.reversed() : bytes;\n  }\n}\n","import React from 'react';\nimport ChooseOptionView from '../ChooseOptionView';\nimport * as Int from \"../../hex/Integer\";\n\nconst INT_SIZES = [Int.INT_8, Int.INT_16, Int.INT_32, Int.INT_64];\nconst LABLES = [\" as \", \" integer\"]\n\nexport default class IntegerEditView extends React.Component<Props, {}> {\n  render() {\n    return (\n      <div className=\"edit-container\">\n        <input type=\"text\"\n          value={this.props.values.numberString}\n          onChange={this.onValueChange} />\n        {LABLES[0]}\n        <ChooseOptionView\n          value={this.props.values.numberType}\n          onChange={this.onTypeChange}\n          options={INT_SIZES} />\n        {LABLES[1]}\n      </div>\n    );\n  }\n\n  onTypeChange = (newValue: string) => {\n    this.onChange({ numberType: newValue });\n  }\n\n  onValueChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    // only allow certain input characters: hex and 'o' and 'x' for 0x/0b\n    const newValue = event.target.value;\n    if (/^([0-9a-fA-Fxo]*)$/.test(newValue)) {\n      this.onChange({ numberString: newValue });\n    }\n  }\n\n  onChange(changedValues: any) {\n    this.props.onChange(Object.assign({}, this.props.values, changedValues));\n  }\n}\n\ninterface Props {\n  values: Int.Values,\n  onChange: (newValues: Int.Values) => void,\n}\n","import React from 'react';\nimport * as Str from '../../hex/String';\nimport * as Common from '../../Common';\n\nconst LABELS_NORMAL = [\"Repeat \", \" exactly \", \" time(s)\"];\nconst LABELS_REVERSED = [\"Reverse \", \" and repeat it \", \" time(s)\"];\n\nexport default class StringEditView extends React.Component<Props> {\n  render() {\n    const labels = this.props.values.type === Str.TYPE_REVERSED ?\n      LABELS_REVERSED : LABELS_NORMAL;\n    return (\n      <div className=\"edit-container\">\n        {labels[0]}\n        <input className=\"input-string\" type=\"text\"\n          value={this.props.values.pattern}\n          onChange={this.onPatternChange} />\n        {labels[1]}\n        <input className=\"input-count\" type=\"text\"\n          value={this.props.values.repeatCount}\n          onChange={this.onNumberChange} />\n        {labels[2]}\n      </div>);\n  }\n\n  onNumberChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (Common.isValidRepeatCountWhileEditing(event.target.value)) {\n      this.onChange({ repeatCount: event.target.value });\n    }\n  }\n\n  onPatternChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.onChange({ pattern: event.target.value });\n  }\n\n  onChange(changedValues: any) {\n    this.props.onChange(Object.assign({}, this.props.values, changedValues));\n  }\n}\n\nexport interface Props {\n  values: Str.Values,\n  onChange: (newValues: Str.Values) => void,\n}\n","import React from 'react';\n\nexport class ListItemControls extends React.Component<Props, {}> {\n  render() {\n    return (\n        <div className=\"list-item-controls\">\n          <input type=\"button\"\n            value=\"Up\"\n            onClick={this.onMoveUp}\n            disabled={this.props.index === 0} />\n          <input type=\"button\"\n            value=\"Down\"\n            onClick={this.onMoveDown}\n            disabled={this.props.isLast} />\n          <input type=\"button\"\n            value=\"Delete\"\n            onClick={this.onDelete} />\n        </div>);\n  }\n\n  onMoveUp = () => {\n    if (this.props.index > 0) {\n      this.props.onItemsSwap(this.props.index, this.props.index - 1);\n    }\n  }\n\n  onMoveDown = () => {\n    if (!this.props.isLast) {\n      this.props.onItemsSwap(this.props.index, this.props.index + 1);\n    }\n  }\n\n  onDelete = () => {\n    this.props.onItemDelete(this.props.index);\n  }\n}\n\ninterface Props {\n  index: number,\n  isLast: boolean,\n  onItemsSwap: (srcIndex: number, dstIndex: number) => void,\n  onItemDelete: (index: number) => void,\n}\n\nexport default ListItemControls;\n","import React from 'react';\nimport ChooseOptionView from '../ChooseOptionView';\nimport Padding from './PaddingEditView';\nimport Integer from './IntegerEditView';\nimport String from './StringEditView';\nimport ReorderableItemControls from '../list/ReorderableItemControls';\nimport * as Int from '../../hex/Integer';\nimport * as Pad from '../../hex/Padding';\nimport * as Str from '../../hex/String';\nimport {AnyValues} from '../../hex/ByteStringBuilder';\n\nconst TYPE_MAP = new Map<string, TypeInfos>();\nTYPE_MAP.set(Int.TYPE, { defaultValues: Int.Utils.defaultValues, viewClass: Integer });\nTYPE_MAP.set(Str.TYPE, { defaultValues: Str.Utils.defaultValues, viewClass: String });\nTYPE_MAP.set(Str.TYPE_REVERSED, { defaultValues: Str.ReversedUtils.defaultValues, viewClass: String });\nTYPE_MAP.set(Pad.TYPE, { defaultValues: Pad.Utils.defaultValues, viewClass: Padding });\nconst TYPES = [...TYPE_MAP.keys()];\n\nfunction getTypeInfo(type: string): TypeInfos {\n  let ret = TYPE_MAP.get(type);\n  if (!ret) {\n    throw Error(`Unknown type: ${type}`);\n  }\n  return ret;\n}\n\nexport default class HexElementView extends React.Component<HexElementViewProps, HexElementViewProps> {\n  render() {\n    return (\n      <tr className=\"list-item multi-colored\">\n        <td>\n          <ChooseOptionView value={this.props.data.type} options={TYPES}\n            onChange={this.onTypeChange} />\n        </td>\n        <td>\n          {this.renderChild(this.props.data.type)}\n        </td>\n        <td>\n          <ReorderableItemControls\n            index={this.props.index}\n            isLast={this.props.isLast}\n            onItemsSwap={this.props.onItemsSwap}\n            onItemDelete={this.props.onItemDelete} />\n        </td>\n      </tr>\n    );\n  }\n\n  onTypeChange = (newType: string) => {\n    this.onChange(newType, getTypeInfo(newType).defaultValues());\n  }\n\n  onChildChange = (newValues: AnyValues) => {\n    this.onChange(this.props.data.type, newValues);\n  }\n\n  onChange(newType: string, newValues: AnyValues) {\n    const newData = Object.assign(newValues, { type: newType });\n    this.props.onChange(this.props.index, newData);\n  }\n\n  renderChild(type: string): any {\n    const viewClass = getTypeInfo(type).viewClass;\n    const props = {\n      onChange: this.onChildChange,\n      values: this.props.data,\n    };\n    return React.createElement(viewClass, props);\n  }\n\n  typeToClass(type: string): any {\n    let ret = TYPE_MAP.get(type)?.viewClass;\n    if (!ret) {\n      throw Error(`Unknown type: ${type}`);\n    }\n    return ret;\n  }\n};\n\ninterface HexElementViewProps {\n  index: number,\n  data: AnyValues,\n  isLast: boolean,\n  onItemsSwap: (srcIndex: number, dstIndex: number) => void,\n  onItemDelete: (index: number) => void,\n  onChange: (index: number, newValue: AnyValues) => void,\n}\n\ninterface TypeInfos {\n  defaultValues: () => AnyValues,\n  viewClass: any,\n}\n","import React from 'react';\nimport HexElementView from '../hex/HexElementView';\nimport {AnyValues} from '../../hex/ByteStringBuilder';\n\n\nexport default class ReorderableListView extends React.Component<Props, State>{\n  constructor(props: Props) {\n    super(props);\n    let initialValues: AnyValues[] = props.initialValues ?? [];\n    let initialEntries: Entry[] = initialValues.map((value, index) => {\n      return { key: index, data: value };\n    });\n    this.state = { entries: initialEntries, nextId: initialEntries.length };\n    props.onChange(initialEntries);\n  }\n\n  render() {\n    return (\n      <div>\n        <table className=\"list\">\n          <thead>\n            <tr>\n              <th>Type</th>\n              <th>Configuration</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.state.entries.map((elem, index) => {\n              return (\n                <HexElementView\n                  index={index}\n                  key={elem.key}\n                  isLast={index + 1 === this.state.entries.length}\n                  onItemDelete={this.onItemDeleted}\n                  onItemsSwap={this.onItemSwapped}\n                  onChange={this.onItemChange}\n                  data={elem.data} />\n              );\n            })}\n            <tr key={-1}>\n              <td /><td>\n                <input type=\"button\" style={{ width: \"100%\" }}\n                  value=\"Add new element\"\n                  onClick={this.onItemAdd} />\n              </td><td />\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n\n  onItemAdd = () => {\n    var copy = this.state.entries.slice();\n    var data = this.props.newItemData(copy.length);\n    let entry: Entry = { key: this.state.nextId, data: data };\n    copy.push(entry);\n    this.onChange(copy, this.state.nextId + 1);\n  }\n\n  onItemChange = (index: number, newValue: AnyValues) => {\n    var copy = this.state.entries.slice();\n    let entry: Entry = { key: copy[index].key, data: newValue };\n    copy[index] = entry;\n    this.onChange(copy, this.state.nextId);\n  }\n\n  onItemSwapped = (indexFrom: number, indexTo: number) => {\n    var copy = this.state.entries.slice();\n    const tmp = copy[indexFrom];\n    copy[indexFrom] = copy[indexTo];\n    copy[indexTo] = tmp;\n    this.onChange(copy, this.state.nextId);\n  }\n\n  onItemDeleted = (index: number) => {\n    var copy = this.state.entries.slice();\n    copy.splice(index, 1);\n    this.onChange(copy, this.state.nextId);\n  }\n\n  onChange(newArray: Entry[], nextId: number) {\n    this.setState({ entries: newArray, nextId: nextId });\n    this.props.onChange(newArray);\n  }\n}\n\ninterface Props {\n  entryClass: any,\n  onChange: (entries: Entry[]) => void,\n  newItemData: (index: number) => AnyValues,\n  initialValues?: AnyValues[],\n}\n\ninterface State {\n  entries: Entry[],\n  nextId: number,\n}\n\ninterface Entry {\n  key: number,\n  data: AnyValues,\n}\n","import React from 'react';\nimport copy from 'copy-to-clipboard';\n\nexport default class CopyButton extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { copiedText: null };\n  }\n\n  render() {\n    const alreadyCopied = this.props.text === this.state.copiedText;\n    const buttonText = alreadyCopied ? \"Copied\" : \"Copy\";\n    return (\n      <button onClick={this.onClick}>\n        {buttonText}\n      </button>\n    );\n  }\n\n  onClick = (event: any) => {\n    const text = this.props.text;\n    copy(text);\n    this.setState({ copiedText: text });\n  }\n}\n\ninterface State {\n  copiedText: string | null,\n}\n\nexport interface Props {\n  text: string,\n}\n","import React from 'react';\nimport ChooseOptionView from './ChooseOptionView';\n\n\nexport class PresetOrCustomStringView extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    let customFormat = props.options.get(props.customOption);\n    if (customFormat === undefined) {\n      throw new Error(\"Initial value for customOption is not suppplied\");\n    }\n\n    this.state = { lastCustomValue: customFormat };\n  }\n\n  render() {\n    return (\n      <div>\n        {this.props.label}\n        <ChooseOptionView\n          value={this.props.values.option}\n          onChange={this.onTypeChange}\n          options={[...this.props.options.keys()]} />\n        {this.isCustom() ?\n          <input type=\"text\"\n            value={this.props.values.value}\n            onChange={this.onValueChange} /> : null}\n      </div>\n    );\n  }\n\n  isCustom(option: string | undefined = undefined): boolean {\n    option = option ?? this.props.values.option;\n    return option === this.props.customOption;\n  }\n\n  onTypeChange = (newType: string) => {\n    if (newType === this.props.values.option) {\n      return; //no type change\n    }\n    let value;\n    if (this.isCustom(newType)) {\n      // preset -> custom\n      // load last used custom value\n      value = this.state.lastCustomValue;\n    }\n    else {\n      if (this.isCustom()) {\n        // custom -> preset\n        // store current custom value for the future\n        this.setState({ lastCustomValue: this.props.values.value });\n      }\n      value = this.props.options.get(newType);\n      if (value === undefined) {\n        throw new Error(\"[BUG] Type has no value mapped\"); //should never happen\n      }\n    }\n    const values: Values = { option: newType, value: value };\n    this.props.onChange(values);\n  }\n\n  onValueChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (this.isCustom()) {//should be true\n      const values: Values = {\n        option: this.props.values.option,\n        value: event.target.value,\n      };\n      this.props.onChange(values);\n    }\n  }\n}\n\nexport interface Props {\n  label?: string,\n  options: Map<string, string>,\n  customOption: string,\n  values: Values,\n  onChange: (newValues: Values) => void,\n}\n\ninterface State {\n  lastCustomValue: string,//changing this has no effect on the rendering of the component\n}\n\nexport interface Values {\n  option: string,\n  value: string,\n}\n\nexport default PresetOrCustomStringView;\n","import ByteString from './ByteString';\n\nexport function escapeBytes(unescaped: ByteString, escapeFunction: (byte: string) => string): ByteString {\n  return new ByteString(unescaped.bytes.map(escapeFunction));\n}\n\nexport function urlEscapeByte(byte: string): string {\n  if (byte.length >= 4) {\n    // \"\\x??\" -> \"%??\"\n    return \"%\" + byte.slice(2);\n  } else {\n    return encodeURIComponent(byte);\n  }\n}\n\nexport function printfEscapeByte(byte: string): string {\n  if (byte.length === 1) {\n    switch (byte) {\n      // escape quote signs since they could mess up passing the payload to a program (eg printf)\n      case \"'\":\n        return \"\\\\x27\";\n      case \"\\\"\":\n        return \"\\\\x22\";\n      // escape spaces, since the html (used for displaying) does not handle consecutive whitespaces well\n      case \" \":\n        return \"\\\\x20\";\n      // escape backslashes, since they can cause a lot of problems\n      case \"\\\\\":\n        return \"\\\\x5c\";\n    }\n  }\n  return byte;\n}\n","import React from 'react';\nimport Checkbox from 'rc-checkbox';\nimport { TaggedByteString, Blueprint, ByteStringBuilder } from '../../hex/ByteStringBuilder';\nimport CopyButton from '../CopyButton';\nimport * as FormatChooser from \"../PresetOrCustomString\";\nimport * as Esc from '../../hex/Escaper';\n\n\nconst CUSTOM_FORMAT = \"custom\";\nconst DEFAULT_FORMAT = \"raw\";\nconst EXPORT_FORMAT = \"export this session\";\nconst URL_FORMAT = \"URL escaped\";\nconst FORMAT_MAP = new Map<string, string>();\nFORMAT_MAP.set(\"python\", \"python -c 'print(\\\"%s\\\")'\");\nFORMAT_MAP.set(\"printf\", \"printf '%s'\");\nFORMAT_MAP.set(DEFAULT_FORMAT, \"%s\");\nFORMAT_MAP.set(CUSTOM_FORMAT, \"your_command --flags '%s'\")\nFORMAT_MAP.set(EXPORT_FORMAT, \"This text should not be visible! %s\");\nFORMAT_MAP.set(URL_FORMAT, \"%s\");//same as raw, but using url escaping\n\n\nexport default class OutputView extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    const default_format_value = FORMAT_MAP.get(DEFAULT_FORMAT) ?? \"%s\";\n    this.state = {\n      format: { option: DEFAULT_FORMAT, value: default_format_value },\n      isLittleEndian: true,\n    };\n  }\n\n  render() {\n    let renderData: RenderData = this.getRenderData();\n    let usesIntegers = false;\n    for (let i = 0; i < this.props.blueprints.length; i++) {\n      if (this.props.blueprints[i].data.type === \"Integer\") {\n        usesIntegers = true;\n      }\n    }\n\n    return (\n      <div className=\"byteOutput\">\n        <table className=\"output_settings\">\n          <tbody>\n            <tr>\n              <td>\n                <FormatChooser.PresetOrCustomStringView options={FORMAT_MAP}\n                  values={this.state.format}\n                  customOption={CUSTOM_FORMAT}\n                  onChange={this.onFormatChange}\n                  label=\"Output format: \" />\n              </td>\n              {usesIntegers ?\n                <td>\n                  <label>\n                    <Checkbox\n                      checked={this.state.isLittleEndian}\n                      onChange={this.onEndianChange}\n                    />\n                    use little endian\n                  </label>\n                </td>\n                : null\n              }\n              {renderData.textToCopy ? <td><CopyButton text={renderData.textToCopy} /></td> : null}\n            </tr>\n          </tbody>\n        </table>\n        {renderData.error ?\n          <span className=\"err-msg\">{renderData.error}</span> :\n          renderData.dom\n        }\n      </div>\n    );\n  }\n\n  getRenderData(): RenderData {\n    const parts = this.state.format.value.split(\"%s\");\n    if (parts.length !== 2) {\n      return {\n        error: 'Format has to contain exactly one \"%s\" (without the quotes)',\n        dom: null, textToCopy: null\n      };\n    } else if (this.state.format.option === EXPORT_FORMAT) {\n      return this.exportRenderData();\n    } else {\n      return this.normalRenderData(parts);\n    }\n  }\n\n  exportRenderData(): RenderData {\n    const state = this.props.blueprints.map((x) => x.data);\n    let stateString: string = JSON.stringify(state);\n    stateString = btoa(stateString);  //base64 encode the json\n\n    // take the current url and set the import param to our current state\n    const urlBuilder = new URL(window.location.href);\n    urlBuilder.searchParams.set(\"import\", stateString);\n    const url = urlBuilder.href;\n\n    const dom = <span>\n      You can return to the current state anytime by visiting:<br /><br />\n      {url}\n    </span>;\n    return { dom: dom, textToCopy: url };\n  }\n\n  normalRenderData(labels: string[]): RenderData {\n    let result = new ByteStringBuilder(this.state.isLittleEndian)\n      .getBytesStrings(this.props.blueprints);\n    if (result.errorMessage) {\n      return { error: result.errorMessage, dom: null, textToCopy: null };\n    }\n    let escapedTaggedStrings = result.byteStrings.map((bs: TaggedByteString) => {\n      const escapeFunction = this.state.format.option === URL_FORMAT ?\n        Esc.urlEscapeByte : Esc.printfEscapeByte;\n\n      let taggedStr: TaggedString = {\n        key: bs.key,\n        str: Esc.escapeBytes(bs.data, escapeFunction).toString(),\n      };\n      return taggedStr;\n    });\n\n    let textToCopy = escapedTaggedStrings.map((tbs) => { return tbs.str }).join(\"\");\n    textToCopy = labels[0] + textToCopy + labels[1];\n\n    let dom = <span>\n      {labels[0]}\n      {escapedTaggedStrings.map((value: TaggedString) => {\n        return <span className=\"multi-colored\" key={value.key}>\n          {value.str}\n        </span>;\n      })}\n      {labels[1]}\n    </span>;\n\n    return { dom: dom, textToCopy: textToCopy };\n  }\n\n  onFormatChange = (newFormat: FormatChooser.Values) => {\n    this.setState({ format: newFormat });\n  }\n\n  onEndianChange = (event: any) => {\n    this.setState({ isLittleEndian: event.target.checked });\n  }\n}\n\ninterface RenderData {\n  error?: string,\n  dom: any,\n  textToCopy: string | null,\n}\n\ninterface Props {\n  blueprints: Blueprint[],\n}\n\ninterface State {\n  format: FormatChooser.Values,\n  isLittleEndian: boolean,\n}\n\ninterface TaggedString {\n  str: string,\n  key: number,\n}\n","import React from 'react';\nimport './App.scss';\nimport HexBuilderListView from './app/views/list/ReorderableListView';\nimport OutputView from './app/views/hex/OutputView';\nimport HexElementView from './app/views/hex/HexElementView';\nimport * as Str from './app/hex/String';\nimport {AnyValues, Blueprint, ByteStringBuilder} from './app/hex/ByteStringBuilder';\n\n\n// TODO: next steps\n//  - Also store state of output (little endian, custom output command, output type)\n//  - Fix names\n//  - Add links to source code and my website\n\nexport default class App extends React.Component<any, State> {\n  constructor(props: any) {\n    super(props);\n    let initialState: AnyValues[];\n    try {\n      const url = new URL(window.location.href);\n      let importParam = url.searchParams.get(\"import\");\n      let stateText = importParam ?? \"W3sicGF0dGVybiI6IkEiLCJwYWRkVG9MZW5ndGgiOiIxMCIsInR5cGUiOiJQYWRkaW5nIn0seyJwYXR0ZXJuIjoiYSIsInBhZGRUb0xlbmd0aCI6IjIwIiwidHlwZSI6IlBhZGRpbmcifSx7InR5cGUiOiJTdHJpbmciLCJwYXR0ZXJuIjoiQmFja3NsYXNoZXMgYXJlIGVzY2FwZWQuIFNvIHVzZSAnXFx4MGEnIGluc3RlYWQgb2YgJ1xcbichIiwicmVwZWF0Q291bnQiOjF9LHsidHlwZSI6IlBhZGRpbmciLCJwYXR0ZXJuIjoiXFx4OTAiLCJwYWRkVG9MZW5ndGgiOjEyOH0seyJ0eXBlIjoiU3RyaW5nIiwicGF0dGVybiI6IllvdSBjYW4gcHV0IGFuIGFkZHJlc3MgaW50byBtZW1vcnkgbGlrZSBiZWxvdzoiLCJyZXBlYXRDb3VudCI6MX0seyJ0eXBlIjoiSW50ZWdlciIsIm51bWJlclR5cGUiOiIzMiBiaXQiLCJudW1iZXJTdHJpbmciOiIweDEyMzQ1Njc4In1d\"\n\n      initialState = this.parseInitialValuesJson(stateText);\n    } catch (e) {\n      initialState = [\n        \"===== Error importing data =====\", e.toString(), \"Hint: Are you sure you copied the whole url?\"\n      ].map((text: string) => {\n        return {type: \"String\", pattern: text, repeatCount: 1};\n      });\n    }\n\n    this.state = { initialValues: initialState, blueprints: [] };\n  }\n\n  render() {\n    return (\n      <div className=\"app-root\">\n        <h1>Payload builder</h1>\n        <HexBuilderListView\n          initialValues={this.state.initialValues}\n          onChange={this.onListChange}\n          entryClass={HexElementView}\n          newItemData={(index: number) => {\n            var v = Str.Utils.defaultValues();\n            v.repeatCount = index + 1;\n            return v;\n          }} />\n        <h2>Output</h2>\n        <OutputView blueprints={this.state.blueprints} />\n      </div>\n    );\n  }\n\n  onListChange = (newBlueprints: Blueprint[]) => {\n    this.setState({ blueprints: newBlueprints });\n  }\n\n  parseInitialValuesJson(stateText: string): AnyValues[] {\n    try {\n      stateText = atob(stateText);\n    } catch {\n      throw new Error(\"Base64 decoding failed\");\n    }\n    let parsedJson: any;\n    try {\n      parsedJson = JSON.parse(stateText);\n    } catch{\n      throw new Error(\"JSON decoding failed\");\n    }\n    try {\n      let values: AnyValues[] = parsedJson;\n      const validator = new ByteStringBuilder();\n      for (let i = 0; i < values.length; i++) {\n        if (!validator.isValid(values[i])){\n          throw new Error(`Element with index ${i} is malformed`);\n        }\n      }\n      return values;\n    } catch{\n      throw new Error(\"Your data is corrupted or not compatible with this version of the software\");\n    }\n  }\n}\n\ninterface State {\n  blueprints: Blueprint[],\n  initialValues: AnyValues[],\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}